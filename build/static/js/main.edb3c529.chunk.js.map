{"version":3,"sources":["components/login/login.jsx","components/login/register.jsx","components/login/main.jsx","components/chat/ConversationListItem/index.js","components/chat/Toolbar/index.js","components/chat/ToolbarButton/index.js","components/chat/ConversationList/index.js","components/chat/Message/index.js","components/chat/MessageList/index.js","components/chat/Messenger/index.js","components/chat/MessageDemo/messagedemo.jsx","App.jsx","serviceWorker.js","index.js","logo.svg"],"names":["Login","props","handleUserName","event","setState","userName","target","value","handlePassWord","passWord","handleToken","state","checkBox","rememberMe","AccessToken","this","token","console","log","undefined","localStorage","setItem","persist","className","ref","containerRef","src","loginImg","alt","htmlFor","type","name","placeholder","onChange","bind","defaultChecked","onClick","handleLoginButton","React","Component","a","async","Promise","resolve","reject","request","url","form","username","password","method","err","res","body","JSON","parse","split","rp","require","Register","uri","then","response","alert","handleResponse","catch","preventDefault","handleRegisterButton","Main","isLogginActive","rightSide","classList","add","remove","prevState","current","currentActive","container","changeState","RightSide","collect","useEffect","shave","data","photo","convId","store","tasks","get","headers","Authorization","getItem","message","messages","push","id","isMine","Toolbar","title","leftItems","rightItems","ToolbarButton","icon","ConversationList","useState","conversations","setConversations","showPopUp","setShowPopUp","addNewUser","sendMessage","post","parseddata","status","getConversations","axios","newConversations","results","map","result","picture","large","key","onKeyDown","e","searchUser","conversation","task","join","MessageList","defaultValue","onKeyPressed","tabIndex","Messenger","MessageDemo","App","userToken","Boolean","window","location","hostname","match","meesage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.edb3c529.chunk.js","sourcesContent":["import React from \"react\";\nimport loginImg from \"../../logo.svg\";\nimport request from \"request\";\nexport class Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"\",\n      passWord: \"\",\n      checkBox: true,\n      rememberMe: true\n    };\n  }\n\n  async handleLoginButton(event) {\n    var token = await AccessToken(this.state.userName, this.state.passWord);\n    console.log(token);\n    if (token !== undefined && !this.state.checkBox === true) {\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"rememberMe\", true);\n\n      this.setState({ rememberMe: false });\n    }\n\n    event.persist();\n  }\n  handleUserName = event => {\n    this.setState({ userName: event.target.value });\n  };\n  handlePassWord = event => {\n    this.setState({ passWord: event.target.value });\n  };\n  handleToken = event => {};\n  render() {\n    return (\n      <div className=\"base-container\" ref={this.props.containerRef}>\n        <div className=\"header\">Login</div>\n        <div className=\"content\">\n          <div className=\"image\">\n            <img src={loginImg} alt=\"\" />\n          </div>\n          <div className=\"form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"username\">Username</label>\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"username\"\n                onChange={this.handleUserName.bind(this)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                onChange={this.handlePassWord.bind(this)}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"loggedIn\">\n          <input\n            className=\"checkbox\"\n            type=\"checkbox\"\n            defaultChecked={false}\n            onChange={() => {\n              this.setState({ checkBox: !this.state.checkBox });\n            }}\n          />\n          <label>Keep me logged in </label>\n        </div>\n        <div className=\"footer\" onClick={this.handleLoginButton.bind(this)}>\n          <button type=\"button\" className=\"btn\">\n            Login\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nasync function AccessToken(userName, passWord) {\n  return new Promise((resolve, reject) =>\n    request(\n      {\n        url: \"http://node-server-t.herokuapp.com/api/v1/login\",\n        form: {\n          username: userName,\n          password: passWord\n        },\n        method: \"POST\"\n      },\n      (err, res, body) => {\n        if (err) throw err;\n        else {\n          var token = JSON.parse(body).token.split(\" \")[1];\n          resolve(token);\n        }\n      }\n    )\n  );\n}\n// function handleResponse(response, username) {\n//   if (response === \"Username Exists\") {\n//     alert(\"Username  already exists Exists\");\n//   } else if (response === \"Internal db error\") {\n//     alert(\"Something went wrong try again later\");\n//   } else {\n//     alert(\"Successfully insertd\");\n//   }\n// }\n","import React from \"react\";\nimport loginImg from \"../../logo.svg\";\nvar rp = require(\"request-promise\");\nexport class Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"\",\n      passWord: \"\"\n    };\n  }\n  handleRegisterButton(event) {\n    AccessToken(this.state.userName, this.state.passWord);\n    console.log(this.state.userName);\n    event.preventDefault();\n  }\n  handleUserName = event => {\n    this.setState({ userName: event.target.value });\n  };\n  handlePassWord = event => {\n    this.setState({ passWord: event.target.value });\n  };\n  render() {\n    return (\n      <div className=\"base-container\" ref={this.props.containerRef}>\n        <div className=\"header\">Register</div>\n        <div className=\"content\">\n          <div className=\"image\">\n            <img src={loginImg} alt=\"\" />\n          </div>\n          <div className=\"form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"username\">Username</label>\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"username\"\n                onChange={this.handleUserName.bind(this)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                type=\"text\"\n                name=\"password\"\n                placeholder=\"passowrd\"\n                onChange={this.handlePassWord.bind(this)}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"footer\" onClick={this.handleRegisterButton.bind(this)}>\n          <button type=\"button\" className=\"btn\">\n            Register\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction AccessToken(userName, passWord) {\n  var options = {\n    method: \"POST\",\n    uri: \"http://node-server-t.herokuapp.com/api/v1/create\",\n    form: {\n      username: userName,\n      password: passWord\n    }\n  };\n  rp(options)\n    .then(response => {\n      console.log(response);\n      handleResponse(response, userName);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n}\nfunction handleResponse(response, userName) {\n  if (response === \"Username Exists\") {\n    alert(\"Username  already exists Exists\");\n  } else if (response === \"Internal db error\") {\n    alert(\"Internal error\");\n  } else if (\n    (response = \"Successfully inserted \" + userName + \" credentials\")\n  ) {\n    alert(\"Successfully inserted\");\n  } else {\n    alert(\"Check your Internet Connection\");\n  }\n}\n\nexport default Register;\n","import React from \"react\";\nimport { Login, Register } from \"./index\";\n\nexport class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogginActive: true\n    };\n  }\n\n  componentDidMount() {\n    //Add .right by default\n    this.rightSide.classList.add(\"right\");\n  }\n\n  changeState() {\n    const { isLogginActive } = this.state;\n\n    if (isLogginActive) {\n      this.rightSide.classList.remove(\"right\");\n      this.rightSide.classList.add(\"left\");\n    } else {\n      this.rightSide.classList.remove(\"left\");\n      this.rightSide.classList.add(\"right\");\n    }\n    this.setState(prevState => ({ isLogginActive: !prevState.isLogginActive }));\n  }\n\n  render() {\n    const { isLogginActive } = this.state;\n    const current = isLogginActive ? \"Register\" : \"Login\";\n    const currentActive = isLogginActive ? \"login\" : \"register\";\n    return (\n      <div className=\"App\">\n        <div className=\"login\">\n          <div className=\"container\" ref={ref => (this.container = ref)}>\n            {isLogginActive && (\n              <Login containerRef={ref => (this.current = ref)} />\n            )}\n            {!isLogginActive && (\n              <Register containerRef={ref => (this.current = ref)} />\n            )}\n          </div>\n          <RightSide\n            current={current}\n            currentActive={currentActive}\n            containerRef={ref => (this.rightSide = ref)}\n            onClick={this.changeState.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst RightSide = props => {\n  return (\n    <div\n      className=\"right-side\"\n      ref={props.containerRef}\n      onClick={props.onClick}\n    >\n      <div className=\"inner-container\">\n        <div className=\"text\">{props.current}</div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport shave from \"shave\";\nimport { store, collect } from \"react-recollect\";\nimport \"./ConversationListItem.css\";\nimport request from \"request\";\nfunction ConversationListItem(props) {\n  useEffect(() => {\n    shave(\".conversation-snippet\", 20);\n  });\n\n  const { photo, name, convId } = props.data;\n  async function setSelectedUser() {\n    delete store.tasks;\n    store.tasks = [];\n    var body = await getMessages(convId);\n  }\n  async function getMessages() {\n    request.get(\n      {\n        url: \"http://node-server-t.herokuapp.com/api/v1/getMessages\",\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n          convId: convId\n        }\n      },\n      (err, res, body) => {\n        if (err) {\n          console.log(\"error here\");\n        } else {\n          var message = JSON.parse(body).data.messages[0];\n          console.log(\"this is message section\" + message);\n          if (message !== undefined) {\n            store.tasks.push({\n              id: convId,\n              message: message,\n              isMine: false\n            });\n          }\n        }\n      }\n    );\n  }\n\n  return (\n    <div className=\"conversation-list-item\" onClick={setSelectedUser}>\n      <img className=\"conversation-photo\" src={photo} alt=\"conversation\" />\n      <div className=\"conversation-info\">\n        <h1 className=\"conversation-title\">{name}</h1>\n        <p className=\"conversation-snippet\">{convId}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default collect(ConversationListItem);\n","import React from 'react';\nimport './Toolbar.css';\n\nexport default function Toolbar(props) {\n    const { title, leftItems, rightItems } = props;\n    return (\n      <div className=\"toolbar\">\n        <div className=\"left-items\">{ leftItems }</div>\n        <h1 className=\"toolbar-title\">{ title }</h1>\n        <div className=\"right-items\">{ rightItems }</div>\n      </div>\n    );\n}","import React from 'react';\nimport './ToolbarButton.css';\n\nexport default function ToolbarButton(props) {\n    const { icon } = props;\n    return (\n      <i className={`toolbar-button ${icon}`} />\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport ConversationListItem from \"../ConversationListItem\";\nimport Toolbar from \"../Toolbar\";\nimport ToolbarButton from \"../ToolbarButton\";\nimport axios from \"axios\";\nimport \"./ConversationList.scss\";\nimport request from \"request\";\n\nexport default function ConversationList(props) {\n  const [conversations, setConversations] = useState([]);\n  const [showPopUp, setShowPopUp] = useState(false);\n  const [searchUserName, setSearchUserName] = useState(\"\");\n  function addNewUser() {\n    setShowPopUp(!showPopUp);\n  }\n  async function sendMessage(username) {\n    request.post(\n      {\n        url: \"http://node-server-t.herokuapp.com/api/v1/sendMessage\",\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        },\n        form: {\n          username: username,\n          message: \"fisrtMessage\"\n        }\n      },\n      (err, res, body) => {\n        if (err) throw err;\n        else {\n          var parseddata = JSON.parse(body);\n          if (parseddata.status === 200) {\n            var convId = parseddata.convId;\n            getConversations(username, convId);\n          } else if (parseddata.status === 401) alert(\"invalid username\");\n        }\n      }\n    );\n  }\n  async function searchUser(event) {\n    if (event.key === \"Enter\") {\n      var name = event.target.value;\n      var body = await sendMessage(name);\n    }\n  }\n\n  const getConversations = (username, convId) => {\n    axios.get(\"https://randomuser.me/api/?results=1\").then(response => {\n      let newConversations = response.data.results.map(result => {\n        return {\n          photo: result.picture.large,\n          name: username,\n          convId: convId\n        };\n      });\n      setConversations([...conversations, ...newConversations]);\n    });\n  };\n\n  return (\n    <div>\n      <div className=\"conversation-list\">\n        <Toolbar\n          title=\"Messenger\"\n          leftItems={[<ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        />\n        <div className=\"footer\">\n          <button type=\"button\" onClick={addNewUser}>\n            New Message\n          </button>\n        </div>\n        <div>\n          {showPopUp ? (\n            <div className=\"popup\">\n              <div>\n                <input\n                  type=\"text\"\n                  name=\"username\"\n                  placeholder=\"username\"\n                  onKeyDown={e => {\n                    searchUser(e);\n                  }}\n                />\n              </div>\n              <button onClick={addNewUser}>close me</button>\n            </div>\n          ) : null}\n        </div>\n        {conversations.map(conversation => (\n          <ConversationListItem key={conversation.name} data={conversation} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport moment from \"moment\";\nimport \"./Message.css\";\nimport { collect, store } from \"react-recollect\";\n\nfunction Message(props) {\n  const data = props.task.message;\n  const isMine = props.task.isMine;\n  console.log(data);\n\n  return (\n    <div className={[\"message\", `${isMine ? \"mine\" : \"\"}`].join(\" \")}>\n      <div className=\"bubble-container\">\n        <div className=\"bubble\">{data}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default collect(Message);\n","import React from \"react\";\nimport Toolbar from \"../Toolbar\";\nimport ToolbarButton from \"../ToolbarButton\";\nimport Message from \"../Message\";\nimport { store, collect } from \"react-recollect\";\nimport request from \"request\";\nimport \"./MessageList.css\";\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  sendMessage(message) {\n    request.post(\n      {\n        url: \"http://node-server-t.herokuapp.com/api/v1/sendMessage\",\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n          convId: store.tasks[0].id\n        },\n        form: {\n          message: message\n        }\n      },\n      (err, res, body) => {\n        if (err) throw err;\n        else console.log(body);\n      }\n    );\n  }\n  onKeyPressed(event) {\n    if (event.key === \"Enter\") {\n      this.sendMessage(event.target.value);\n      store.tasks.push({\n        id: event.target.value,\n        message: event.target.value,\n        isMine: true\n      });\n      event.target.value = \"\";\n    }\n  }\n  render() {\n    return (\n      <div className=\"message-list\">\n        <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton\n              key=\"info\"\n              icon=\"ion-ios-information-circle-outline\"\n            />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        />\n\n        {store.tasks.map(task => (\n          <Message key={task.id} task={task} />\n        ))}\n\n        <div className=\"compose\">\n          <input\n            type=\"text\"\n            className=\"compose-input\"\n            defaultValue={\"\"}\n            placeholder=\"Type a message, @name\"\n            onKeyDown={e => this.onKeyPressed(e)}\n            tabIndex=\"0\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default collect(MessageList);\n","import React from \"react\";\nimport ConversationList from \"../ConversationList\";\nimport MessageList from \"../MessageList\";\nimport \"./Messenger.css\";\n\nexport default function Messenger(props) {\n  return (\n    <div className=\"messenger\">\n      <div className=\"scrollable sidebar\">\n        <ConversationList />\n      </div>\n\n      <div className=\"scrollable content\">\n        <MessageList />\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Messenger from \"../Messenger\";\nvar request = require(\"request\");\n\nconst MessageDemo = () => {\n  return <Messenger />;\n};\n\nexport default MessageDemo;\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Main } from \"./components/login/index\";\nimport Messenger from \"./components/chat/Messenger\";\nimport MessageDemo from \"./components/chat/MessageDemo/messagedemo\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userToken: \"\",\n      rememberMe: false\n    };\n  }\n  componentDidMount() {\n    this.setState({ rememberMe: localStorage.getItem(\"rememberMe\") });\n    this.setState({ userToken: localStorage.getItem(\"token\") });\n  }\n  render() {\n    if (this.state.rememberMe) {\n      return <MessageDemo />;\n    } else {\n      return <Main />;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport request from \"request\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"react-recollect\";\n\nstore.tasks = [\n  {\n    id: 1,\n    meesage: \"Example task!\",\n    isMine: false\n  }\n];\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.9a76e74e.svg\";"],"sourceRoot":""}