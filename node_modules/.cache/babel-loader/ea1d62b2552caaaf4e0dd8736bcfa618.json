{"ast":null,"code":"import _slicedToArray from \"/home/krishnavamsi/Documents/chat-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/krishnavamsi/Documents/chat-master/src/components/chat/MessageList/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Compose from \"../Compose\";\nimport Toolbar from \"../Toolbar\";\nimport ToolbarButton from \"../ToolbarButton\";\nimport Message from \"../Message\";\nimport moment from \"moment\";\nimport \"./MessageList.css\";\nconst MY_USER_ID = \"apple\";\nexport default function MessageList(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        messages = _useState2[0],\n        setMessages = _useState2[1];\n\n  useEffect(() => {\n    getMessages();\n  }, []);\n\n  const getMessages = () => {//    var tempMessages = [\n    //       {\n    //         id: 1,\n    //         author: 'apple',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 2,\n    //         author: 'orange',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 3,\n    //         author: 'orange',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 4,\n    //         author: 'apple',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 5,\n    //         author: 'apple',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 6,\n    //         author: 'apple',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 7,\n    //         author: 'orange',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 8,\n    //         author: 'orange',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 9,\n    //         author: 'apple',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 10,\n    //         author: 'orange',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //     ]\n    //     setMessages([...messages, ...tempMessages])\n    // }\n    // const renderMessages = () => {\n    //   let i = 0;\n    //   let messageCount = messages.length;\n    //   let tempMessages = [];\n    //   while (i < messageCount) {\n    //     let previous = messages[i - 1];\n    //     let current = messages[i];\n    //     let next = messages[i + 1];\n    //     let isMine = current.author === MY_USER_ID;\n    //     let currentMoment = moment(current.timestamp);\n    //     let prevBySameAuthor = false;\n    //     let nextBySameAuthor = false;\n    //     let startsSequence = true;\n    //     let endsSequence = true;\n    //     let showTimestamp = true;\n    //     if (previous) {\n    //       let previousMoment = moment(previous.timestamp);\n    //       let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n    //       prevBySameAuthor = previous.author === current.author;\n    //       if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n    //         startsSequence = false;\n    //       }\n    //       if (previousDuration.as('hours') < 1) {\n    //         showTimestamp = false;\n    //       }\n    //     }\n    //     if (next) {\n    //       let nextMoment = moment(next.timestamp);\n    //       let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n    //       nextBySameAuthor = next.author === current.author;\n    //       if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n    //         endsSequence = false;\n    //       }\n    //     }\n    //     tempMessages.push(\n    //       <Message\n    //         key={i}\n    //         isMine={isMine}\n    //         startsSequence={startsSequence}\n    //         endsSequence={endsSequence}\n    //         showTimestamp={showTimestamp}\n    //         data={current}\n    //       />\n    //     );\n    //     // Proceed to the next message.\n    //     i += 1;\n    //   }\n    //   return tempMessages;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"message-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    title: \"Conversation Title\",\n    rightItems: [React.createElement(ToolbarButton, {\n      key: \"info\",\n      icon: \"ion-ios-information-circle-outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"video\",\n      icon: \"ion-ios-videocam\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"phone\",\n      icon: \"ion-ios-call\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"message-list-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, renderMessages()), React.createElement(Compose, {\n    rightItems: [React.createElement(ToolbarButton, {\n      key: \"photo\",\n      icon: \"ion-ios-camera\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"image\",\n      icon: \"ion-ios-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"audio\",\n      icon: \"ion-ios-mic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"money\",\n      icon: \"ion-ios-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"games\",\n      icon: \"ion-logo-game-controller-b\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"emoji\",\n      icon: \"ion-ios-happy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/krishnavamsi/Documents/chat-master/src/components/chat/MessageList/index.js"],"names":["React","useEffect","useState","Compose","Toolbar","ToolbarButton","Message","moment","MY_USER_ID","MessageList","props","messages","setMessages","getMessages","renderMessages"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,mBAAP;AAEA,MAAMC,UAAU,GAAG,OAAnB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,oBACTR,QAAQ,CAAC,EAAD,CADC;AAAA;AAAA,QAClCS,QADkC;AAAA,QACxBC,WADwB;;AAGzCX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,WAAW,GAAG,MAAM,CACxjHD;;AAmHA,SACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,IAAA,UAAU,EAAE,CACV,oBAAC,aAAD;AACE,MAAA,GAAG,EAAC,MADN;AAEE,MAAA,IAAI,EAAC,oCAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADU,EAKV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,kBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALU,EAMV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANU,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCC,cAAc,EAAvD,CAbF,EAeE,oBAAC,OAAD;AACE,IAAA,UAAU,EAAE,CACV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADU,EAEV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFU,EAGV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHU,EAIV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJU,EAKV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,4BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALU,EAMV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANU,CADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;AA4BD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Compose from \"../Compose\";\nimport Toolbar from \"../Toolbar\";\nimport ToolbarButton from \"../ToolbarButton\";\nimport Message from \"../Message\";\nimport moment from \"moment\";\n\nimport \"./MessageList.css\";\n\nconst MY_USER_ID = \"apple\";\n\nexport default function MessageList(props) {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    getMessages();\n  }, []);\n\n  const getMessages = () => {\n    //    var tempMessages = [\n    //       {\n    //         id: 1,\n    //         author: 'apple',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 2,\n    //         author: 'orange',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 3,\n    //         author: 'orange',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 4,\n    //         author: 'apple',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 5,\n    //         author: 'apple',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 6,\n    //         author: 'apple',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 7,\n    //         author: 'orange',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 8,\n    //         author: 'orange',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 9,\n    //         author: 'apple',\n    //         message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n    //         timestamp: new Date().getTime()\n    //       },\n    //       {\n    //         id: 10,\n    //         author: 'orange',\n    //         message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n    //         timestamp: new Date().getTime()\n    //       },\n    //     ]\n    //     setMessages([...messages, ...tempMessages])\n    // }\n    // const renderMessages = () => {\n    //   let i = 0;\n    //   let messageCount = messages.length;\n    //   let tempMessages = [];\n    //   while (i < messageCount) {\n    //     let previous = messages[i - 1];\n    //     let current = messages[i];\n    //     let next = messages[i + 1];\n    //     let isMine = current.author === MY_USER_ID;\n    //     let currentMoment = moment(current.timestamp);\n    //     let prevBySameAuthor = false;\n    //     let nextBySameAuthor = false;\n    //     let startsSequence = true;\n    //     let endsSequence = true;\n    //     let showTimestamp = true;\n    //     if (previous) {\n    //       let previousMoment = moment(previous.timestamp);\n    //       let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n    //       prevBySameAuthor = previous.author === current.author;\n    //       if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n    //         startsSequence = false;\n    //       }\n    //       if (previousDuration.as('hours') < 1) {\n    //         showTimestamp = false;\n    //       }\n    //     }\n    //     if (next) {\n    //       let nextMoment = moment(next.timestamp);\n    //       let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n    //       nextBySameAuthor = next.author === current.author;\n    //       if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n    //         endsSequence = false;\n    //       }\n    //     }\n    //     tempMessages.push(\n    //       <Message\n    //         key={i}\n    //         isMine={isMine}\n    //         startsSequence={startsSequence}\n    //         endsSequence={endsSequence}\n    //         showTimestamp={showTimestamp}\n    //         data={current}\n    //       />\n    //     );\n    //     // Proceed to the next message.\n    //     i += 1;\n    //   }\n    //   return tempMessages;\n  };\n\n  return (\n    <div className=\"message-list\">\n      <Toolbar\n        title=\"Conversation Title\"\n        rightItems={[\n          <ToolbarButton\n            key=\"info\"\n            icon=\"ion-ios-information-circle-outline\"\n          />,\n          <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n          <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n        ]}\n      />\n\n      <div className=\"message-list-container\">{renderMessages()}</div>\n\n      <Compose\n        rightItems={[\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n        ]}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}