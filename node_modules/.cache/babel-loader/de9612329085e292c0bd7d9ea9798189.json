{"ast":null,"code":"/**\n  shave - Shave is a javascript plugin that truncates multi-line text within a html element based on set max height\n  @version v2.5.7\n  @link https://github.com/dollarshaveclub/shave#readme\n  @author Jeff Wainwright <yowainwright@gmail.com> (jeffry.in)\n  @license MIT\n**/\nfunction shave(target, maxHeight) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof maxHeight === 'undefined' || isNaN(maxHeight)) throw Error('maxHeight is required');\n  var els = typeof target === 'string' ? document.querySelectorAll(target) : target;\n  if (!els) return;\n  var character = opts.character || '…';\n  var classname = opts.classname || 'js-shave';\n  var spaces = typeof opts.spaces === 'boolean' ? opts.spaces : true;\n  var charHtml = \"<span class=\\\"js-shave-char\\\">\".concat(character, \"</span>\");\n  if (!('length' in els)) els = [els];\n\n  for (var i = 0; i < els.length; i += 1) {\n    var el = els[i];\n    var styles = el.style;\n    var span = el.querySelector(\".\".concat(classname));\n    var textProp = el.textContent === undefined ? 'innerText' : 'textContent'; // If element text has already been shaved\n\n    if (span) {\n      // Remove the ellipsis to recapture the original text\n      el.removeChild(el.querySelector('.js-shave-char'));\n      el[textProp] = el[textProp]; // eslint-disable-line\n      // nuke span, recombine text\n    }\n\n    var fullText = el[textProp];\n    var words = spaces ? fullText.split(' ') : fullText; // If 0 or 1 words, we're done\n\n    if (words.length < 2) continue; // Temporarily remove any CSS height for text height calculation\n\n    var heightStyle = styles.height;\n    styles.height = 'auto';\n    var maxHeightStyle = styles.maxHeight;\n    styles.maxHeight = 'none'; // If already short enough, we're done\n\n    if (el.offsetHeight <= maxHeight) {\n      styles.height = heightStyle;\n      styles.maxHeight = maxHeightStyle;\n      continue;\n    } // Binary search for number of words which can fit in allotted height\n\n\n    var max = words.length - 1;\n    var min = 0;\n    var pivot = void 0;\n\n    while (min < max) {\n      pivot = min + max + 1 >> 1; // eslint-disable-line no-bitwise\n\n      el[textProp] = spaces ? words.slice(0, pivot).join(' ') : words.slice(0, pivot);\n      el.insertAdjacentHTML('beforeend', charHtml);\n      if (el.offsetHeight > maxHeight) max = pivot - 1;else min = pivot;\n    }\n\n    el[textProp] = spaces ? words.slice(0, max).join(' ') : words.slice(0, max);\n    el.insertAdjacentHTML('beforeend', charHtml);\n    var diff = spaces ? \" \".concat(words.slice(max).join(' ')) : words.slice(max);\n    var shavedText = document.createTextNode(diff);\n    var elWithShavedText = document.createElement('span');\n    elWithShavedText.classList.add(classname);\n    elWithShavedText.style.display = 'none';\n    elWithShavedText.appendChild(shavedText);\n    el.insertAdjacentElement('beforeend', elWithShavedText);\n    styles.height = heightStyle;\n    styles.maxHeight = maxHeightStyle;\n  }\n}\n\nexport default shave;","map":{"version":3,"sources":["/home/krishnavamsi/Documents/chat-master/node_modules/shave/dist/shave.es.js"],"names":["shave","target","maxHeight","opts","arguments","length","undefined","isNaN","Error","els","document","querySelectorAll","character","classname","spaces","charHtml","concat","i","el","styles","style","span","querySelector","textProp","textContent","removeChild","fullText","words","split","heightStyle","height","maxHeightStyle","offsetHeight","max","min","pivot","slice","join","insertAdjacentHTML","diff","shavedText","createTextNode","elWithShavedText","createElement","classList","add","display","appendChild","insertAdjacentElement"],"mappings":"AAAA;;;;;;;AAOA,SAASA,KAAT,CAAeC,MAAf,EAAuBC,SAAvB,EAAkC;AAChC,MAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AACA,MAAI,OAAOF,SAAP,KAAqB,WAArB,IAAoCK,KAAK,CAACL,SAAD,CAA7C,EAA0D,MAAMM,KAAK,CAAC,uBAAD,CAAX;AAC1D,MAAIC,GAAG,GAAG,OAAOR,MAAP,KAAkB,QAAlB,GAA6BS,QAAQ,CAACC,gBAAT,CAA0BV,MAA1B,CAA7B,GAAiEA,MAA3E;AACA,MAAI,CAACQ,GAAL,EAAU;AACV,MAAIG,SAAS,GAAGT,IAAI,CAACS,SAAL,IAAkB,GAAlC;AACA,MAAIC,SAAS,GAAGV,IAAI,CAACU,SAAL,IAAkB,UAAlC;AACA,MAAIC,MAAM,GAAG,OAAOX,IAAI,CAACW,MAAZ,KAAuB,SAAvB,GAAmCX,IAAI,CAACW,MAAxC,GAAiD,IAA9D;AACA,MAAIC,QAAQ,GAAG,iCAAiCC,MAAjC,CAAwCJ,SAAxC,EAAmD,SAAnD,CAAf;AACA,MAAI,EAAE,YAAYH,GAAd,CAAJ,EAAwBA,GAAG,GAAG,CAACA,GAAD,CAAN;;AAExB,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACJ,MAAxB,EAAgCY,CAAC,IAAI,CAArC,EAAwC;AACtC,QAAIC,EAAE,GAAGT,GAAG,CAACQ,CAAD,CAAZ;AACA,QAAIE,MAAM,GAAGD,EAAE,CAACE,KAAhB;AACA,QAAIC,IAAI,GAAGH,EAAE,CAACI,aAAH,CAAiB,IAAIN,MAAJ,CAAWH,SAAX,CAAjB,CAAX;AACA,QAAIU,QAAQ,GAAGL,EAAE,CAACM,WAAH,KAAmBlB,SAAnB,GAA+B,WAA/B,GAA6C,aAA5D,CAJsC,CAIqC;;AAE3E,QAAIe,IAAJ,EAAU;AACR;AACAH,MAAAA,EAAE,CAACO,WAAH,CAAeP,EAAE,CAACI,aAAH,CAAiB,gBAAjB,CAAf;AACAJ,MAAAA,EAAE,CAACK,QAAD,CAAF,GAAeL,EAAE,CAACK,QAAD,CAAjB,CAHQ,CAGqB;AAC7B;AACD;;AAED,QAAIG,QAAQ,GAAGR,EAAE,CAACK,QAAD,CAAjB;AACA,QAAII,KAAK,GAAGb,MAAM,GAAGY,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAH,GAAyBF,QAA3C,CAdsC,CAce;;AAErD,QAAIC,KAAK,CAACtB,MAAN,GAAe,CAAnB,EAAsB,SAhBgB,CAgBN;;AAEhC,QAAIwB,WAAW,GAAGV,MAAM,CAACW,MAAzB;AACAX,IAAAA,MAAM,CAACW,MAAP,GAAgB,MAAhB;AACA,QAAIC,cAAc,GAAGZ,MAAM,CAACjB,SAA5B;AACAiB,IAAAA,MAAM,CAACjB,SAAP,GAAmB,MAAnB,CArBsC,CAqBX;;AAE3B,QAAIgB,EAAE,CAACc,YAAH,IAAmB9B,SAAvB,EAAkC;AAChCiB,MAAAA,MAAM,CAACW,MAAP,GAAgBD,WAAhB;AACAV,MAAAA,MAAM,CAACjB,SAAP,GAAmB6B,cAAnB;AACA;AACD,KA3BqC,CA2BpC;;;AAGF,QAAIE,GAAG,GAAGN,KAAK,CAACtB,MAAN,GAAe,CAAzB;AACA,QAAI6B,GAAG,GAAG,CAAV;AACA,QAAIC,KAAK,GAAG,KAAK,CAAjB;;AAEA,WAAOD,GAAG,GAAGD,GAAb,EAAkB;AAChBE,MAAAA,KAAK,GAAGD,GAAG,GAAGD,GAAN,GAAY,CAAZ,IAAiB,CAAzB,CADgB,CACY;;AAE5Bf,MAAAA,EAAE,CAACK,QAAD,CAAF,GAAeT,MAAM,GAAGa,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeD,KAAf,EAAsBE,IAAtB,CAA2B,GAA3B,CAAH,GAAqCV,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeD,KAAf,CAA1D;AACAjB,MAAAA,EAAE,CAACoB,kBAAH,CAAsB,WAAtB,EAAmCvB,QAAnC;AACA,UAAIG,EAAE,CAACc,YAAH,GAAkB9B,SAAtB,EAAiC+B,GAAG,GAAGE,KAAK,GAAG,CAAd,CAAjC,KAAsDD,GAAG,GAAGC,KAAN;AACvD;;AAEDjB,IAAAA,EAAE,CAACK,QAAD,CAAF,GAAeT,MAAM,GAAGa,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeH,GAAf,EAAoBI,IAApB,CAAyB,GAAzB,CAAH,GAAmCV,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeH,GAAf,CAAxD;AACAf,IAAAA,EAAE,CAACoB,kBAAH,CAAsB,WAAtB,EAAmCvB,QAAnC;AACA,QAAIwB,IAAI,GAAGzB,MAAM,GAAG,IAAIE,MAAJ,CAAWW,KAAK,CAACS,KAAN,CAAYH,GAAZ,EAAiBI,IAAjB,CAAsB,GAAtB,CAAX,CAAH,GAA4CV,KAAK,CAACS,KAAN,CAAYH,GAAZ,CAA7D;AACA,QAAIO,UAAU,GAAG9B,QAAQ,CAAC+B,cAAT,CAAwBF,IAAxB,CAAjB;AACA,QAAIG,gBAAgB,GAAGhC,QAAQ,CAACiC,aAAT,CAAuB,MAAvB,CAAvB;AACAD,IAAAA,gBAAgB,CAACE,SAAjB,CAA2BC,GAA3B,CAA+BhC,SAA/B;AACA6B,IAAAA,gBAAgB,CAACtB,KAAjB,CAAuB0B,OAAvB,GAAiC,MAAjC;AACAJ,IAAAA,gBAAgB,CAACK,WAAjB,CAA6BP,UAA7B;AACAtB,IAAAA,EAAE,CAAC8B,qBAAH,CAAyB,WAAzB,EAAsCN,gBAAtC;AACAvB,IAAAA,MAAM,CAACW,MAAP,GAAgBD,WAAhB;AACAV,IAAAA,MAAM,CAACjB,SAAP,GAAmB6B,cAAnB;AACD;AACF;;AAED,eAAe/B,KAAf","sourcesContent":["/**\n  shave - Shave is a javascript plugin that truncates multi-line text within a html element based on set max height\n  @version v2.5.7\n  @link https://github.com/dollarshaveclub/shave#readme\n  @author Jeff Wainwright <yowainwright@gmail.com> (jeffry.in)\n  @license MIT\n**/\nfunction shave(target, maxHeight) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof maxHeight === 'undefined' || isNaN(maxHeight)) throw Error('maxHeight is required');\n  var els = typeof target === 'string' ? document.querySelectorAll(target) : target;\n  if (!els) return;\n  var character = opts.character || '…';\n  var classname = opts.classname || 'js-shave';\n  var spaces = typeof opts.spaces === 'boolean' ? opts.spaces : true;\n  var charHtml = \"<span class=\\\"js-shave-char\\\">\".concat(character, \"</span>\");\n  if (!('length' in els)) els = [els];\n\n  for (var i = 0; i < els.length; i += 1) {\n    var el = els[i];\n    var styles = el.style;\n    var span = el.querySelector(\".\".concat(classname));\n    var textProp = el.textContent === undefined ? 'innerText' : 'textContent'; // If element text has already been shaved\n\n    if (span) {\n      // Remove the ellipsis to recapture the original text\n      el.removeChild(el.querySelector('.js-shave-char'));\n      el[textProp] = el[textProp]; // eslint-disable-line\n      // nuke span, recombine text\n    }\n\n    var fullText = el[textProp];\n    var words = spaces ? fullText.split(' ') : fullText; // If 0 or 1 words, we're done\n\n    if (words.length < 2) continue; // Temporarily remove any CSS height for text height calculation\n\n    var heightStyle = styles.height;\n    styles.height = 'auto';\n    var maxHeightStyle = styles.maxHeight;\n    styles.maxHeight = 'none'; // If already short enough, we're done\n\n    if (el.offsetHeight <= maxHeight) {\n      styles.height = heightStyle;\n      styles.maxHeight = maxHeightStyle;\n      continue;\n    } // Binary search for number of words which can fit in allotted height\n\n\n    var max = words.length - 1;\n    var min = 0;\n    var pivot = void 0;\n\n    while (min < max) {\n      pivot = min + max + 1 >> 1; // eslint-disable-line no-bitwise\n\n      el[textProp] = spaces ? words.slice(0, pivot).join(' ') : words.slice(0, pivot);\n      el.insertAdjacentHTML('beforeend', charHtml);\n      if (el.offsetHeight > maxHeight) max = pivot - 1;else min = pivot;\n    }\n\n    el[textProp] = spaces ? words.slice(0, max).join(' ') : words.slice(0, max);\n    el.insertAdjacentHTML('beforeend', charHtml);\n    var diff = spaces ? \" \".concat(words.slice(max).join(' ')) : words.slice(max);\n    var shavedText = document.createTextNode(diff);\n    var elWithShavedText = document.createElement('span');\n    elWithShavedText.classList.add(classname);\n    elWithShavedText.style.display = 'none';\n    elWithShavedText.appendChild(shavedText);\n    el.insertAdjacentElement('beforeend', elWithShavedText);\n    styles.height = heightStyle;\n    styles.maxHeight = maxHeightStyle;\n  }\n}\n\nexport default shave;\n"]},"metadata":{},"sourceType":"module"}