{"ast":null,"code":"import _regeneratorRuntime from\"/home/krishnavamsi/Downloads/chat-master/node_modules/@babel/runtime/regenerator\";import React,{useEffect}from\"react\";import shave from\"shave\";import{store,collect}from\"react-recollect\";import\"./ConversationListItem.css\";import request from\"request\";function ConversationListItem(props){useEffect(function(){shave(\".conversation-snippet\",20);});var _props$data=props.data,photo=_props$data.photo,name=_props$data.name,convId=_props$data.convId;function setSelectedUser(){var body;return _regeneratorRuntime.async(function setSelectedUser$(_context){while(1){switch(_context.prev=_context.next){case 0:delete store.tasks;store.tasks=[];_context.next=4;return _regeneratorRuntime.awrap(getMessages(convId));case 4:body=_context.sent;case 5:case\"end\":return _context.stop();}}});}function getMessages(){return _regeneratorRuntime.async(function getMessages$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:request.get({url:\"http://node-server-t.herokuapp.com/api/v1/getMessages\",headers:{Authorization:\"Bearer \"+localStorage.getItem(\"token\"),convId:convId}},function(err,res,body){if(err){console.log(\"error here\");}else{var message=JSON.parse(body).data.messages[0];console.log(\"this is message section\"+message);if(message!==undefined){store.tasks.push({id:convId,message:message,isMine:false});}}});case 1:case\"end\":return _context2.stop();}}});}return React.createElement(\"div\",{className:\"conversation-list-item\",onClick:setSelectedUser},React.createElement(\"img\",{className:\"conversation-photo\",src:photo,alt:\"conversation\"}),React.createElement(\"div\",{className:\"conversation-info\"},React.createElement(\"h1\",{className:\"conversation-title\"},name),React.createElement(\"p\",{className:\"conversation-snippet\"},convId)));}export default collect(ConversationListItem);","map":{"version":3,"sources":["/home/krishnavamsi/Downloads/chat-master/src/components/chat/ConversationListItem/index.js"],"names":["React","useEffect","shave","store","collect","request","ConversationListItem","props","data","photo","name","convId","setSelectedUser","tasks","getMessages","body","get","url","headers","Authorization","localStorage","getItem","err","res","console","log","message","JSON","parse","messages","undefined","push","id","isMine"],"mappings":"kHAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,OAAhB,KAA+B,iBAA/B,CACA,MAAO,4BAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,SAApB,CACA,QAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqC,CACnCN,SAAS,CAAC,UAAM,CACdC,KAAK,CAAC,uBAAD,CAA0B,EAA1B,CAAL,CACD,CAFQ,CAAT,CADmC,gBAKHK,KAAK,CAACC,IALH,CAK3BC,KAL2B,aAK3BA,KAL2B,CAKpBC,IALoB,aAKpBA,IALoB,CAKdC,MALc,aAKdA,MALc,CAMnC,QAAeC,CAAAA,eAAf,qIACE,MAAOT,CAAAA,KAAK,CAACU,KAAb,CACAV,KAAK,CAACU,KAAN,CAAc,EAAd,CAFF,iDAGmBC,WAAW,CAACH,MAAD,CAH9B,SAGMI,IAHN,6DAKA,QAAeD,CAAAA,WAAf,2HACET,OAAO,CAACW,GAAR,CACE,CACEC,GAAG,CAAE,uDADP,CAEEC,OAAO,CAAE,CACPC,aAAa,CAAE,UAAYC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADpB,CAEPV,MAAM,CAAEA,MAFD,CAFX,CADF,CAQE,SAACW,GAAD,CAAMC,GAAN,CAAWR,IAAX,CAAoB,CAClB,GAAIO,GAAJ,CAAS,CACPE,OAAO,CAACC,GAAR,CAAY,YAAZ,EACD,CAFD,IAEO,CACL,GAAIC,CAAAA,OAAO,CAAGC,IAAI,CAACC,KAAL,CAAWb,IAAX,EAAiBP,IAAjB,CAAsBqB,QAAtB,CAA+B,CAA/B,CAAd,CACAL,OAAO,CAACC,GAAR,CAAY,0BAA4BC,OAAxC,EACA,GAAIA,OAAO,GAAKI,SAAhB,CAA2B,CACzB3B,KAAK,CAACU,KAAN,CAAYkB,IAAZ,CAAiB,CACfC,EAAE,CAAErB,MADW,CAEfe,OAAO,CAAEA,OAFM,CAGfO,MAAM,CAAE,KAHO,CAAjB,EAKD,CACF,CACF,CAtBH,EADF,+CA2BA,MACE,4BAAK,SAAS,CAAC,wBAAf,CAAwC,OAAO,CAAErB,eAAjD,EACE,2BAAK,SAAS,CAAC,oBAAf,CAAoC,GAAG,CAAEH,KAAzC,CAAgD,GAAG,CAAC,cAApD,EADF,CAEE,2BAAK,SAAS,CAAC,mBAAf,EACE,0BAAI,SAAS,CAAC,oBAAd,EAAoCC,IAApC,CADF,CAEE,yBAAG,SAAS,CAAC,sBAAb,EAAqCC,MAArC,CAFF,CAFF,CADF,CASD,CAED,cAAeP,CAAAA,OAAO,CAACE,oBAAD,CAAtB","sourcesContent":["import React, { useEffect } from \"react\";\nimport shave from \"shave\";\nimport { store, collect } from \"react-recollect\";\nimport \"./ConversationListItem.css\";\nimport request from \"request\";\nfunction ConversationListItem(props) {\n  useEffect(() => {\n    shave(\".conversation-snippet\", 20);\n  });\n\n  const { photo, name, convId } = props.data;\n  async function setSelectedUser() {\n    delete store.tasks;\n    store.tasks = [];\n    var body = await getMessages(convId);\n  }\n  async function getMessages() {\n    request.get(\n      {\n        url: \"http://node-server-t.herokuapp.com/api/v1/getMessages\",\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n          convId: convId\n        }\n      },\n      (err, res, body) => {\n        if (err) {\n          console.log(\"error here\");\n        } else {\n          var message = JSON.parse(body).data.messages[0];\n          console.log(\"this is message section\" + message);\n          if (message !== undefined) {\n            store.tasks.push({\n              id: convId,\n              message: message,\n              isMine: false\n            });\n          }\n        }\n      }\n    );\n  }\n\n  return (\n    <div className=\"conversation-list-item\" onClick={setSelectedUser}>\n      <img className=\"conversation-photo\" src={photo} alt=\"conversation\" />\n      <div className=\"conversation-info\">\n        <h1 className=\"conversation-title\">{name}</h1>\n        <p className=\"conversation-snippet\">{convId}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default collect(ConversationListItem);\n"]},"metadata":{},"sourceType":"module"}