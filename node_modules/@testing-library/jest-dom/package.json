{
  "_from": "@testing-library/jest-dom@^4.2.4",
  "_id": "@testing-library/jest-dom@4.2.4",
  "_inBundle": false,
  "_integrity": "sha512-j31Bn0rQo12fhCWOUWy9fl7wtqkp7In/YP2p5ZFyRuiiB9Qs3g+hS4gAmDWONbAHcRmVooNJ5eOHQDCOmUFXHg==",
  "_location": "/@testing-library/jest-dom",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@testing-library%2fjest-dom",
    "fetchSpec": "^4.2.4",
    "name": "@testing-library/jest-dom",
    "raw": "@testing-library/jest-dom@^4.2.4",
    "rawSpec": "^4.2.4",
    "registry": true,
    "saveSpec": null,
    "scope": "@testing-library",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@testing-library/jest-dom/-/jest-dom-4.2.4.tgz",
  "_shasum": "00dfa0cbdd837d9a3c2a7f3f0a248ea6e7b89742",
  "_spec": "@testing-library/jest-dom@^4.2.4",
  "_where": "/home/krishnavamsi/react/my-app",
  "author": {
    "email": "gnapse@gmail.com",
    "name": "Ernesto Garcia",
    "url": "http://gnapse.github.io/"
  },
  "bugs": {
    "url": "https://github.com/testing-library/jest-dom/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@babel/runtime": "^7.5.1",
    "chalk": "^2.4.1",
    "css": "^2.2.3",
    "css.escape": "^1.5.1",
    "jest-diff": "^24.0.0",
    "jest-matcher-utils": "^24.0.0",
    "lodash": "^4.17.11",
    "pretty-format": "^24.0.0",
    "redent": "^3.0.0"
  },
  "deprecated": false,
  "description": "Custom jest matchers to test the state of the DOM",
  "devDependencies": {
    "jest-watch-select-projects": "^0.1.2",
    "jsdom": "^15.1.0",
    "kcd-scripts": "^1.4.0"
  },
  "engines": {
    "node": ">=8",
    "npm": ">=6"
  },
  "eslintConfig": {
    "extends": "./node_modules/kcd-scripts/eslint.js",
    "rules": {
      "babel/no-invalid-this": "off",
      "import/no-unassigned-import": "off",
      "import/prefer-default-export": "off"
    }
  },
  "eslintIgnore": [
    "coverage",
    "dist",
    "node_modules"
  ],
  "files": [
    "dist",
    "extend-expect.d.ts",
    "extend-expect.js"
  ],
  "homepage": "https://github.com/testing-library/jest-dom#readme",
  "husky": {
    "hooks": {
      "pre-commit": "kcd-scripts pre-commit"
    }
  },
  "keywords": [
    "dom",
    "jest",
    "jsdom",
    "testing"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "@testing-library/jest-dom",
  "optionalDependencies": {},
  "readme": "<div align=\"center\">\n<h1>jest-dom</h1>\n\n<a href=\"https://www.emojione.com/emoji/1f989\">\n  <img\n    height=\"80\"\n    width=\"80\"\n    alt=\"owl\"\n    src=\"https://raw.githubusercontent.com/testing-library/jest-dom/master/other/owl.png\"\n  />\n</a>\n\n<p>Custom jest matchers to test the state of the DOM</p>\n\n</div>\n\n<hr />\n\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![version][version-badge]][package] [![downloads][downloads-badge]][npmtrends]\n[![MIT License][license-badge]][license]\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-28-orange.svg?style=flat-square)](#contributors-)\n[![PRs Welcome][prs-badge]][prs] [![Code of Conduct][coc-badge]][coc]\n\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n## The problem\n\nYou want to use [jest][] to write tests that assert various things about the\nstate of a DOM. As part of that goal, you want to avoid all the repetitive\npatterns that arise in doing so. Checking for an element's attributes, its text\ncontent, its css classes, you name it.\n\n## This solution\n\nThe `@testing-library/jest-dom` library provides a set of custom jest matchers\nthat you can use to extend jest. These will make your tests more declarative,\nclear to read and to maintain.\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Custom matchers](#custom-matchers)\n  - [`toBeDisabled`](#tobedisabled)\n  - [`toBeEnabled`](#tobeenabled)\n  - [`toBeEmpty`](#tobeempty)\n  - [`toBeInTheDocument`](#tobeinthedocument)\n  - [`toBeInvalid`](#tobeinvalid)\n  - [`toBeRequired`](#toberequired)\n  - [`toBeValid`](#tobevalid)\n  - [`toBeVisible`](#tobevisible)\n  - [`toContainElement`](#tocontainelement)\n  - [`toContainHTML`](#tocontainhtml)\n  - [`toHaveAttribute`](#tohaveattribute)\n  - [`toHaveClass`](#tohaveclass)\n  - [`toHaveFocus`](#tohavefocus)\n  - [`toHaveFormValues`](#tohaveformvalues)\n  - [`toHaveStyle`](#tohavestyle)\n  - [`toHaveTextContent`](#tohavetextcontent)\n  - [`toHaveValue`](#tohavevalue)\n  - [`toBeChecked`](#tobechecked)\n- [Deprecated matchers](#deprecated-matchers)\n  - [`toBeInTheDOM`](#tobeinthedom)\n- [Inspiration](#inspiration)\n- [Other Solutions](#other-solutions)\n- [Guiding Principles](#guiding-principles)\n- [Contributors](#contributors)\n- [LICENSE](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and\nshould be installed as one of your project's `devDependencies`:\n\n```\nnpm install --save-dev @testing-library/jest-dom\n```\n\n> Note: We also recommend installing the jest-dom eslint plugin which provides auto-fixable lint rules \n> that prevent false positive tests and improve test readability by ensuring you are using the right\n> matchers in your tests.  More details can be found at\n> [eslint-plugin-jest-dom](https://github.com/testing-library/eslint-plugin-jest-dom).\n\n## Usage\n\nImport `@testing-library/jest-dom/extend-expect` once (for instance in your\n[tests setup file][]) and you're good to go:\n\n[tests setup file]:\n  https://jestjs.io/docs/en/configuration.html#setupfilesafterenv-array\n\n```javascript\nimport '@testing-library/jest-dom/extend-expect'\n```\n\n> Note: If you're using TypeScript, make sure your setup file is a `.ts` and not\n> a `.js` to include the necessary types.\n\nAlternatively, you can selectively import only the matchers you intend to use,\nand extend jest's `expect` yourself:\n\n```javascript\nimport {toBeInTheDocument, toHaveClass} from '@testing-library/jest-dom'\n\nexpect.extend({toBeInTheDocument, toHaveClass})\n```\n\n> Note: when using TypeScript, this way of importing matchers won't provide the\n> necessary type definitions. More on this\n> [here](https://github.com/testing-library/jest-dom/pull/11#issuecomment-387817459).\n\n## Custom matchers\n\n`@testing-library/jest-dom` can work with any library or framework that returns\nDOM elements from queries. The custom matcher examples below demonstrate using\n`document.querySelector` and\n[DOM Testing Library](https://github.com/testing-library/dom-testing-library)\nfor querying DOM elements.\n\n### `toBeDisabled`\n\n```typescript\ntoBeDisabled()\n```\n\nThis allows you to check whether an element is disabled from the user's\nperspective.\n\nIt matches if the element is a form control and the `disabled` attribute is\nspecified on this element or the element is a descendant of a form element with\na `disabled` attribute.\n\nAccording to the specification, the following elements can be\n[actually disabled](https://html.spec.whatwg.org/multipage/semantics-other.html#disabled-elements):\n`button`, `input`, `select`, `textarea`, `optgroup`, `option`, `fieldset`.\n\n#### Examples\n\n```html\n<button data-testid=\"button\" type=\"submit\" disabled>submit</button>\n<fieldset disabled><input type=\"text\" data-testid=\"input\" /></fieldset>\n<a href=\"...\" disabled>link</a>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"button\"]')).toBeDisabled()\nexpect(document.querySelector('[data-testid=\"input\"]')).toBeDisabled()\nexpect(document.querySelector('a')).not.toBeDisabled()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nexpect(getByTestId(container, 'button')).toBeDisabled()\nexpect(getByTestId(container, 'input')).toBeDisabled()\nexpect(getByText(container, 'link')).not.toBeDisabled()\n```\n\n<hr />\n\n### `toBeEnabled`\n\n```typescript\ntoBeEnabled()\n```\n\nThis allows you to check whether an element is not disabled from the user's\nperspective.\n\nIt works like `not.toBeDisabled()`. Use this matcher to avoid double negation in\nyour tests.\n\n<hr />\n\n### `toBeEmpty`\n\n```typescript\ntoBeEmpty()\n```\n\nThis allows you to assert whether an element has content or not.\n\n#### Examples\n\n```html\n<span data-testid=\"not-empty\"><span data-testid=\"empty\"></span></span>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"empty\"]').toBeEmpty()\nexpect(document.querySelector('[data-testid=\"not-empty\"]').not.toBeEmpty()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nexpect(queryByTestId(container, 'empty')).toBeEmpty()\nexpect(queryByTestId(container, 'not-empty')).not.toBeEmpty()\n```\n\n<hr />\n\n### `toBeInTheDocument`\n\n```typescript\ntoBeInTheDocument()\n```\n\nThis allows you to assert whether an element is present in the document or not.\n\n#### Examples\n\n```html\n<span data-testid=\"html-element\"><span>Html Element</span></span>\n<svg data-testid=\"svg-element\"></svg>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst htmlElement = document.querySelector('[data-testid=\"html-element\"]')\nconst svgElement = document.querySelector('[data-testid=\"svg-element\"]')\nconst nonExistantElement = document.querySelector('does-not-exist')\nconst detachedElement = document.createElement('div')\n\nexpect(htmlElement).toBeInTheDocument()\nexpect(svgElement).toBeInTheDocument()\nexpect(nonExistantElement).not.toBeInTheDocument()\nexpect(detachedElement).not.toBeInTheDocument()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nexpect(\n  queryByTestId(document.documentElement, 'html-element'),\n).toBeInTheDocument()\nexpect(\n  queryByTestId(document.documentElement, 'svg-element'),\n).toBeInTheDocument()\nexpect(\n  queryByTestId(document.documentElement, 'does-not-exist'),\n).not.toBeInTheDocument()\n```\n\n> Note: This matcher does not find detached elements. The element must be added\n> to the document to be found by toBeInTheDocument. If you desire to search in a\n> detached element please use: [`toContainElement`](#tocontainelement)\n\n<hr />\n\n### `toBeInvalid`\n\n```typescript\ntoBeInvalid()\n```\n\nThis allows you to check if a form element, or the entire `form`, is currently\ninvalid.\n\nAn `input`, `select`, `textarea`, or `form` element is invalid if it has an\n[`aria-invalid` attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-invalid_attribute)\nwith no value or a value of `\"true\"`, or if the result of\n[`checkValidity()`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation)\nis `false`.\n\n#### Examples\n\n```html\n<input data-testid=\"no-aria-invalid\" />\n<input data-testid=\"aria-invalid\" aria-invalid />\n<input data-testid=\"aria-invalid-value\" aria-invalid=\"true\" />\n<input data-testid=\"aria-invalid-false\" aria-invalid=\"false\" />\n\n<form data-testid=\"valid-form\">\n  <input />\n</form>\n\n<form data-testid=\"invalid-form\">\n  <input required />\n</form>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(queryByTestId('no-aria-invalid')).not.toBeInvalid()\nexpect(queryByTestId('aria-invalid')).toBeInvalid()\nexpect(queryByTestId('aria-invalid-value')).toBeInvalid()\nexpect(queryByTestId('aria-invalid-false')).not.toBeInvalid()\n\nexpect(queryByTestId('valid-form')).not.toBeInvalid()\nexpect(queryByTestId('invalid-form')).toBeInvalid()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nexpect(getByTestId(container, 'no-aria-invalid')).not.toBeInvalid()\nexpect(getByTestId(container, 'aria-invalid')).toBeInvalid()\nexpect(getByTestId(container, 'aria-invalid-value')).toBeInvalid()\nexpect(getByTestId(container, 'aria-invalid-false')).not.toBeInvalid()\n\nexpect(getByTestId(container, 'valid-form')).not.toBeInvalid()\nexpect(getByTestId(container, 'invalid-form')).toBeInvalid()\n```\n\n<hr />\n\n### `toBeRequired`\n\n```typescript\ntoBeRequired()\n```\n\nThis allows you to check if an form element is currently required.\n\nAn element is required if it is having a `required` or `aria-required=\"true\"`\nattribute.\n\n#### Examples\n\n```html\n<input data-testid=\"required-input\" required />\n<input data-testid=\"aria-required-input\" aria-required=\"true\" />\n<input data-testid=\"conflicted-input\" required aria-required=\"false\" />\n<input data-testid=\"aria-not-required-input\" aria-required=\"false\" />\n<input data-testid=\"optional-input\" />\n<input data-testid=\"unsupported-type\" type=\"image\" required />\n<select data-testid=\"select\" required></select>\n<textarea data-testid=\"textarea\" required></textarea>\n<div data-testid=\"supported-role\" role=\"tree\" required></div>\n<div data-testid=\"supported-role-aria\" role=\"tree\" aria-required=\"true\"></div>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"required-input\"]')).toBeRequired()\nexpect(\n  document.querySelector('[data-testid=\"aria-required-input\"]'),\n).toBeRequired()\nexpect(\n  document.querySelector('[data-testid=\"conflicted-input\"]'),\n).toBeRequired()\nexpect(\n  document.querySelector('[data-testid=\"aria-not-required-input\"]'),\n).not.toBeRequired()\nexpect(\n  document.querySelector('[data-testid=\"unsupported-type\"]'),\n).not.toBeRequired()\nexpect(document.querySelector('[data-testid=\"select\"]')).toBeRequired()\nexpect(document.querySelector('[data-testid=\"textarea\"]')).toBeRequired()\nexpect(\n  document.querySelector('[data-testid=\"supported-role\"]'),\n).not.toBeRequired()\nexpect(\n  document.querySelector('[data-testid=\"supported-role-aria\"]'),\n).toBeRequired()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nexpect(getByTestId(container, 'required-input')).toBeRequired()\nexpect(getByTestId(container, 'aria-required-input')).toBeRequired()\nexpect(getByTestId(container, 'conflicted-input')).toBeRequired()\nexpect(getByTestId(container, 'aria-not-required-input')).not.toBeRequired()\nexpect(getByTestId(container, 'optional-input')).not.toBeRequired()\nexpect(getByTestId(container, 'unsupported-type')).not.toBeRequired()\nexpect(getByTestId(container, 'select')).toBeRequired()\nexpect(getByTestId(container, 'textarea')).toBeRequired()\nexpect(getByTestId(container, 'supported-role')).not.toBeRequired()\nexpect(getByTestId(container, 'supported-role-aria')).toBeRequired()\n```\n\n<hr />\n\n### `toBeValid`\n\n```typescript\ntoBeValid()\n```\n\nThis allows you to check if the value of a form element, or the entire `form`,\nis currently valid.\n\nAn `input`, `select`, `textarea`, or `form` element is valid if it has no\n[`aria-invalid` attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-invalid_attribute)\nor an attribute value of `\"false\"`. The result of\n[`checkValidity()`](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation)\nmust also be `true`.\n\n#### Examples\n\n```html\n<input data-testid=\"no-aria-invalid\" />\n<input data-testid=\"aria-invalid\" aria-invalid />\n<input data-testid=\"aria-invalid-value\" aria-invalid=\"true\" />\n<input data-testid=\"aria-invalid-false\" aria-invalid=\"false\" />\n\n<form data-testid=\"valid-form\">\n  <input />\n</form>\n\n<form data-testid=\"invalid-form\">\n  <input required />\n</form>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(queryByTestId('no-aria-invalid')).toBeValid()\nexpect(queryByTestId('aria-invalid')).not.toBeValid()\nexpect(queryByTestId('aria-invalid-value')).not.toBeValid()\nexpect(queryByTestId('aria-invalid-false')).toBeValid()\n\nexpect(queryByTestId('valid-form')).toBeValid()\nexpect(queryByTestId('invalid-form')).not.toBeValid()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nexpect(getByTestId(container, 'no-aria-invalid')).toBeValid()\nexpect(getByTestId(container, 'aria-invalid')).not.toBeValid()\nexpect(getByTestId(container, 'aria-invalid-value')).not.toBeValid()\nexpect(getByTestId(container, 'aria-invalid-false')).toBeValid()\n\nexpect(getByTestId(container, 'valid-form')).toBeValid()\nexpect(getByTestId(container, 'invalid-form')).not.toBeValid()\n```\n\n<hr />\n\n### `toBeVisible`\n\n```typescript\ntoBeVisible()\n```\n\nThis allows you to check if an element is currently visible to the user.\n\nAn element is visible if **all** the following conditions are met:\n\n- it does not have its css property `display` set to `none`\n- it does not have its css property `visibility` set to either `hidden` or\n  `collapse`\n- it does not have its css property `opacity` set to `0`\n- its parent element is also visible (and so on up to the top of the DOM tree)\n- it does not have the\n  [`hidden`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)\n  attribute\n\n#### Examples\n\n```html\n<div data-testid=\"zero-opacity\" style=\"opacity: 0\">Zero Opacity Example</div>\n<div data-testid=\"visibility-hidden\" style=\"visibility: hidden\">\n  Visibility Hidden Example\n</div>\n<div data-testid=\"display-none\" style=\"display: none\">Display None Example</div>\n<div style=\"opacity: 0\">\n  <span data-testid=\"hidden-parent\">Hidden Parent Example</span>\n</div>\n<div data-testid=\"visible\">Visible Example</div>\n<div data-testid=\"hidden-attribute\" hidden>Hidden Attribute Example</div>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"zero-opacity\"]')).not.toBeVisible()\nexpect(\n  document.querySelector('[data-testid=\"visibility-hidden\"]'),\n).not.toBeVisible()\nexpect(document.querySelector('[data-testid=\"display-none\"]')).not.toBeVisible()\nexpect(\n  document.querySelector('[data-testid=\"hidden-parent\"]'),\n).not.toBeVisible()\nexpect(document.querySelector('[data-testid=\"visible\"]')).toBeVisible()\nexpect(\n  document.querySelector('[data-testid=\"hidden-attribute\"]'),\n).not.toBeVisible()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nexpect(getByText(container, 'Zero Opacity Example')).not.toBeVisible()\nexpect(getByText(container, 'Visibility Hidden Example')).not.toBeVisible()\nexpect(getByText(container, 'Display None Example')).not.toBeVisible()\nexpect(getByText(container, 'Hidden Parent Example')).not.toBeVisible()\nexpect(getByText(container, 'Visible Example')).toBeVisible()\nexpect(getByText(container, 'Hidden Attribute Example')).not.toBeVisible()\n```\n\n<hr />\n\n### `toContainElement`\n\n```typescript\ntoContainElement(element: HTMLElement | SVGElement | null)\n```\n\nThis allows you to assert whether an element contains another element as a\ndescendant or not.\n\n#### Examples\n\n```html\n<span data-testid=\"ancestor\"><span data-testid=\"descendant\"></span></span>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst ancestor = document.querySelector('[data-testid=\"ancestor\"]')\nconst descendant = document.querySelector('[data-testid=\"descendant\"]')\nconst nonExistantElement = document.querySelector(\n  '[data-testid=\"does-not-exist\"]',\n)\n\nexpect(ancestor).toContainElement(descendant)\nexpect(descendant).not.toContainElement(ancestor)\nexpect(ancestor).not.toContainElement(nonExistantElement)\n```\n\n##### Using DOM Testing Library\n\n```javascript\nconst {queryByTestId} = render(/* Rendered HTML */)\n\nconst ancestor = queryByTestId(container, 'ancestor')\nconst descendant = queryByTestId(container, 'descendant')\nconst nonExistantElement = queryByTestId(container, 'does-not-exist')\n\nexpect(ancestor).toContainElement(descendant)\nexpect(descendant).not.toContainElement(ancestor)\nexpect(ancestor).not.toContainElement(nonExistantElement)\n```\n\n<hr />\n\n### `toContainHTML`\n\n```typescript\ntoContainHTML(htmlText: string)\n```\n\nAssert whether a string representing a HTML element is contained in another\nelement:\n\n#### Examples\n\n```html\n<span data-testid=\"parent\"><span data-testid=\"child\"></span></span>\n```\n\n##### Using document.querySelector\n\n```javascript\nexpect(document.querySelector('[data-testid=\"parent\"]')).toContainHTML(\n  '<span data-testid=\"child\"></span>',\n)\n```\n\n##### Using DOM Testing Library\n\n```javascript\nexpect(getByTestId(container, 'parent')).toContainHTML(\n  '<span data-testid=\"child\"></span>',\n)\n```\n\n> Chances are you probably do not need to use this matcher. We encourage testing\n> from the perspective of how the user perceives the app in a browser. That's\n> why testing against a specific DOM structure is not advised.\n>\n> It could be useful in situations where the code being tested renders html that\n> was obtained from an external source, and you want to validate that that html\n> code was used as intended.\n>\n> It should not be used to check DOM structure that you control. Please use\n> [`toContainElement`](#tocontainelement) instead.\n\n<hr />\n\n### `toHaveAttribute`\n\n```typescript\ntoHaveAttribute(attr: string, value?: any)\n```\n\nThis allows you to check whether the given element has an attribute or not. You\ncan also optionally check that the attribute has a specific expected value or\npartial match using\n[expect.stringContaining](https://jestjs.io/docs/en/expect.html#expectnotstringcontainingstring)/[expect.stringMatching](https://jestjs.io/docs/en/expect.html#expectstringmatchingstring-regexp)\n\n#### Examples\n\n```html\n<button data-testid=\"ok-button\" type=\"submit\" disabled>ok</button>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst button = document.querySelector('[data-testid=\"ok-button\"]')\n\nexpect(button).toHaveAttribute('disabled')\nexpect(button).toHaveAttribute('type', 'submit')\nexpect(button).not.toHaveAttribute('type', 'button')\n```\n\n##### Using DOM Testing Library\n\n```javascript\nconst button = getByTestId(container, 'ok-button')\n\nexpect(button).toHaveAttribute('disabled')\nexpect(button).toHaveAttribute('type', 'submit')\nexpect(button).not.toHaveAttribute('type', 'button')\n\nexpect(button).toHaveAttribute('type', expect.stringContaining('sub'))\nexpect(button).toHaveAttribute('type', expect.not.stringContaining('but'))\n```\n\n<hr />\n\n### `toHaveClass`\n\n```typescript\ntoHaveClass(...classNames: string[])\n```\n\nThis allows you to check whether the given element has certain classes within\nits `class` attribute.\n\nYou must provide at least one class, unless you are asserting that an element\ndoes not have any classes.\n\n#### Examples\n\n```html\n<button data-testid=\"delete-button\" class=\"btn extra btn-danger\">\n  Delete item\n</button>\n<button data-testid=\"no-classes\">No Classes</button>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst deleteButton = document.querySelector('[data-testid=\"delete-button\"]')\nconst noClasses = document.querySelector('[data-testid=\"no-classes\"]')\n\nexpect(deleteButton).toHaveClass('extra')\nexpect(deleteButton).toHaveClass('btn-danger btn')\nexpect(deleteButton).toHaveClass('btn-danger', 'btn')\nexpect(deleteButton).not.toHaveClass('btn-link')\n\nexpect(noClasses).not.toHaveClass()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nconst deleteButton = getByTestId(container, 'delete-button')\nconst noClasses = getByTestId(container, 'no-classes')\n\nexpect(deleteButton).toHaveClass('extra')\nexpect(deleteButton).toHaveClass('btn-danger btn')\nexpect(deleteButton).toHaveClass('btn-danger', 'btn')\nexpect(deleteButton).not.toHaveClass('btn-link')\n\nexpect(noClasses).not.toHaveClass()\n```\n\n<hr />\n\n### `toHaveFocus`\n\n```typescript\ntoHaveFocus()\n```\n\nThis allows you to assert whether an element has focus or not.\n\n#### Examples\n\n```html\n<div><input type=\"text\" data-testid=\"element-to-focus\" /></div>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst input = document.querySelector(['data-testid=\"element-to-focus\"'])\n\ninput.focus()\nexpect(input).toHaveFocus()\n\ninput.blur()\nexpect(input).not.toHaveFocus()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nconst input = queryByTestId(container, 'element-to-focus')\n\nfireEvent.focus(input)\nexpect(input).toHaveFocus()\n\nfireEvent.blur(input)\nexpect(input).not.toHaveFocus()\n```\n\n<hr />\n\n### `toHaveFormValues`\n\n```typescript\ntoHaveFormValues(expectedValues: {\n  [name: string]: any\n})\n```\n\nThis allows you to check if a form or fieldset contains form controls for each\ngiven name, and having the specified value.\n\n> It is important to stress that this matcher can only be invoked on a [form][]\n> or a [fieldset][] element.\n>\n> This allows it to take advantage of the [.elements][] property in `form` and\n> `fieldset` to reliably fetch all form controls within them.\n>\n> This also avoids the possibility that users provide a container that contains\n> more than one `form`, thereby intermixing form controls that are not related,\n> and could even conflict with one another.\n\nThis matcher abstracts away the particularities with which a form control value\nis obtained depending on the type of form control. For instance, `<input>`\nelements have a `value` attribute, but `<select>` elements do not. Here's a list\nof all cases covered:\n\n- `<input type=\"number\">` elements return the value as a **number**, instead of\n  a string.\n- `<input type=\"checkbox\">` elements:\n  - if there's a single one with the given `name` attribute, it is treated as a\n    **boolean**, returning `true` if the checkbox is checked, `false` if\n    unchecked.\n  - if there's more than one checkbox with the same `name` attribute, they are\n    all treated collectively as a single form control, which returns the value\n    as an **array** containing all the values of the selected checkboxes in the\n    collection.\n- `<input type=\"radio\">` elements are all grouped by the `name` attribute, and\n  such a group treated as a single form control. This form control returns the\n  value as a **string** corresponding to the `value` attribute of the selected\n  radio button within the group.\n- `<input type=\"text\">` elements return the value as a **string**. This also\n  applies to `<input>` elements having any other possible `type` attribute\n  that's not explicitly covered in different rules above (e.g. `search`,\n  `email`, `date`, `password`, `hidden`, etc.)\n- `<select>` elements without the `multiple` attribute return the value as a\n  **string** corresponding to the `value` attribute of the selected `option`, or\n  `undefined` if there's no selected option.\n- `<select multiple>` elements return the value as an **array** containing all\n  the values of the [selected options][].\n- `<textarea>` elements return their value as a **string**. The value\n  corresponds to their node content.\n\nThe above rules make it easy, for instance, to switch from using a single select\ncontrol to using a group of radio buttons. Or to switch from a multi select\ncontrol, to using a group of checkboxes. The resulting set of form values used\nby this matcher to compare against would be the same.\n\n[selected options]:\n  https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedOptions\n[form]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n[fieldset]: https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement\n[.elements]:\n  https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements\n\n#### Examples\n\n```html\n<form data-testid=\"login-form\">\n  <input type=\"text\" name=\"username\" value=\"jane.doe\" />\n  <input type=\"password\" name=\"password\" value=\"12345678\" />\n  <input type=\"checkbox\" name=\"rememberMe\" checked />\n  <button type=\"submit\">Sign in</button>\n</form>\n```\n\n```javascript\nconst form = document.querySelector('[data-testid=\"login-form\"]')\nexpect(form).toHaveFormValues({\n  username: 'jane.doe',\n  rememberMe: true,\n})\n```\n\n### `toHaveStyle`\n\n```typescript\ntoHaveStyle(css: string)\n```\n\nThis allows you to check if a certain element has some specific css properties\nwith specific values applied. It matches only if the element has _all_ the\nexpected properties applied, not just some of them.\n\n#### Examples\n\n```html\n<button data-testid=\"delete-button\" style=\"display: none; color: red\">\n  Delete item\n</button>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst button = document.querySelector(['data-testid=\"delete-button\"'])\n\nexpect(button).toHaveStyle('display: none')\nexpect(button).toHaveStyle(`\n  color: red;\n  display: none;\n`)\nexpect(button).not.toHaveStyle(`\n  color: blue;\n  display: none;\n`)\n```\n\n##### Using DOM Testing Library\n\n```javascript\nconst button = getByTestId(container, 'delete-button')\n\nexpect(button).toHaveStyle('display: none')\nexpect(button).toHaveStyle(`\n  color: red;\n  display: none;\n`)\nexpect(button).not.toHaveStyle(`\n  color: blue;\n  display: none;\n`)\n```\n\nThis also works with rules that are applied to the element via a class name for\nwhich some rules are defined in a stylesheet currently active in the document.\nThe usual rules of css precedence apply.\n\n<hr />\n\n### `toHaveTextContent`\n\n```typescript\ntoHaveTextContent(text: string | RegExp, options?: {normalizeWhitespace: boolean})\n```\n\nThis allows you to check whether the given element has a text content or not.\n\nWhen a `string` argument is passed through, it will perform a partial\ncase-sensitive match to the element content.\n\nTo perform a case-insensitive match, you can use a `RegExp` with the `/i`\nmodifier.\n\nIf you want to match the whole content, you can use a `RegExp` to do it.\n\n#### Examples\n\n```html\n<span data-testid=\"text-content\">Text Content</span>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst element = document.querySelector('[data-testid=\"text-content\"]')\n\nexpect(element).toHaveTextContent('Content')\nexpect(element).toHaveTextContent(/^Text Content$/) // to match the whole content\nexpect(element).toHaveTextContent(/content$/i) // to use case-insentive match\nexpect(element).not.toHaveTextContent('content')\n```\n\n##### Using DOM Testing Library\n\n```javascript\nconst element = getByTestId(container, 'text-content')\n\nexpect(element).toHaveTextContent('Content')\nexpect(element).toHaveTextContent(/^Text Content$/) // to match the whole content\nexpect(element).toHaveTextContent(/content$/i) // to use case-insentive match\nexpect(element).not.toHaveTextContent('content')\n```\n\n<hr />\n\n### `toHaveValue`\n\n```typescript\ntoHaveValue(value: string | string[] | number)\n```\n\nThis allows you to check whether the given form element has the specified value.\nIt accepts `<input>`, `<select>` and `<textarea>` elements with the exception of\nof `<input type=\"checkbox\">` and `<input type=\"radio\">`, which can be\nmeaningfully matched only using [`toBeChecked`](#tobechecked) or\n[`toHaveFormValues`](#tohaveformvalues).\n\nFor all other form elements, the value is matched using the same algorithm as in\n[`toHaveFormValues`](#tohaveformvalues) does.\n\n#### Examples\n\n```html\n<input type=\"text\" value=\"text\" data-testid=\"input-text\" />\n<input type=\"number\" value=\"5\" data-testid=\"input-number\" />\n<input type=\"text\" data-testid=\"input-empty\" />\n<select data-testid=\"multiple\" multiple data-testid=\"select-number\">\n  <option value=\"first\">First Value</option>\n  <option value=\"second\" selected>Second Value</option>\n  <option value=\"third\" selected>Third Value</option>\n</select>\n```\n\n##### Using document.querySelector\n\n```javascript\nconst textInput = document.querySelector('[data-testid=\"input-text\"]')\nconst numberInput = document.querySelector('[data-testid=\"input-number\"]')\nconst emptyInput = document.querySelector('[data-testid=\"input-empty\"]')\nconst selectInput = document.querySelector('[data-testid=\"select-number\"]')\n\nexpect(textInput).toHaveValue('text')\nexpect(numberInput).toHaveValue(5)\nexpect(emptyInput).not.toHaveValue()\nexpect(selectInput).not.toHaveValue(['second', 'third'])\n```\n\n##### Using DOM Testing Library\n\n```javascript\nconst {getByTestId} = render(/* Rendered HTML */)\n\nconst textInput = getByTestId('input-text')\nconst numberInput = getByTestId('input-number')\nconst emptyInput = getByTestId('input-empty')\nconst selectInput = getByTestId('select-number')\n\nexpect(textInput).toHaveValue('text')\nexpect(numberInput).toHaveValue(5)\nexpect(emptyInput).not.toHaveValue()\nexpect(selectInput).not.toHaveValue(['second', 'third'])\n```\n\n<hr />\n\n### `toBeChecked`\n\n```typescript\ntoBeChecked()\n```\n\nThis allows you to check whether the given element is checked. It accepts an\n`input` of type `checkbox` or `radio` and elements with a `role` of `checkbox`\nor `radio` with a valid `aria-checked` attribute of `\"true\"` or `\"false\"`.\n\n#### Examples\n\n```html\n<input type=\"checkbox\" checked data-testid=\"input-checkbox-checked\" />\n<input type=\"checkbox\" data-testid=\"input-checkbox-unchecked\" />\n<div role=\"checkbox\" aria-checked=\"true\" data-testid=\"aria-checkbox-checked\" />\n<div\n  role=\"checkbox\"\n  aria-checked=\"false\"\n  data-testid=\"aria-checkbox-unchecked\"\n/>\n\n<input type=\"radio\" checked value=\"foo\" data-testid=\"input-radio-checked\" />\n<input type=\"radio\" value=\"foo\" data-testid=\"input-radio-unchecked\" />\n<div role=\"radio\" aria-checked=\"true\" data-testid=\"aria-radio-checked\" />\n<div role=\"radio\" aria-checked=\"false\" data-testid=\"aria-radio-unchecked\" />\n```\n\n##### Using document.querySelector\n\n```javascript\nconst inputCheckboxChecked = document.querySelector(\n  '[data-testid=\"input-checkbox-checked\"]',\n)\nconst inputCheckboxUnchecked = document.querySelector(\n  '[data-testid=\"input-checkbox-unchecked\"]',\n)\nconst ariaCheckboxChecked = document.querySelector(\n  '[data-testid=\"aria-checkbox-checked\"]',\n)\nconst ariaCheckboxUnchecked = document.querySelector(\n  '[data-testid=\"aria-checkbox-unchecked\"]',\n)\nexpect(inputCheckboxChecked).toBeChecked()\nexpect(inputCheckboxUnchecked).not.toBeChecked()\nexpect(ariaCheckboxChecked).toBeChecked()\nexpect(ariaCheckboxUnchecked).not.toBeChecked()\n\nconst inputRadioChecked = document.querySelector(\n  '[data-testid=\"input-radio-checked\"]',\n)\nconst inputRadioUnchecked = document.querySelector(\n  '[data-testid=\"input-radio-unchecked\"]',\n)\nconst ariaRadioChecked = document.querySelector(\n  '[data-testid=\"aria-radio-checked\"]',\n)\nconst ariaRadioUnchecked = document.querySelector(\n  '[data-testid=\"aria-radio-unchecked\"]',\n)\nexpect(inputRadioChecked).toBeChecked()\nexpect(inputRadioUnchecked).not.toBeChecked()\nexpect(ariaRadioChecked).toBeChecked()\nexpect(ariaRadioUnchecked).not.toBeChecked()\n```\n\n##### Using DOM Testing Library\n\n```javascript\nconst {getByTestId} = render(/* Rendered HTML */)\n\nconst inputCheckboxChecked = getByTestId('input-checkbox-checked')\nconst inputCheckboxUnchecked = getByTestId('input-checkbox-unchecked')\nconst ariaCheckboxChecked = getByTestId('aria-checkbox-checked')\nconst ariaCheckboxUnchecked = getByTestId('aria-checkbox-unchecked')\nexpect(inputCheckboxChecked).toBeChecked()\nexpect(inputCheckboxUnchecked).not.toBeChecked()\nexpect(ariaCheckboxChecked).toBeChecked()\nexpect(ariaCheckboxUnchecked).not.toBeChecked()\n\nconst inputRadioChecked = getByTestId('input-radio-checked')\nconst inputRadioUnchecked = getByTestId('input-radio-unchecked')\nconst ariaRadioChecked = getByTestId('aria-radio-checked')\nconst ariaRadioUnchecked = getByTestId('aria-radio-unchecked')\nexpect(inputRadioChecked).toBeChecked()\nexpect(inputRadioUnchecked).not.toBeChecked()\nexpect(ariaRadioChecked).toBeChecked()\nexpect(ariaRadioUnchecked).not.toBeChecked()\n```\n\n## Deprecated matchers\n\n### `toBeInTheDOM`\n\n```typescript\ntoBeInTheDOM()\n```\n\nThis allows you to check whether a value is a DOM element, or not.\n\nContrary to what its name implies, this matcher only checks that you passed to\nit a valid DOM element. It does not have a clear definition of that \"the DOM\"\nis. Therefore, it does not check wether that element is contained anywhere.\n\nThis is the main reason why this matcher is deprecated, and will be removed in\nthe next major release. You can follow the discussion around this decision in\nmore detail [here](https://github.com/testing-library/jest-dom/issues/34).\n\nAs an alternative, you can use [`toBeInTheDocument`](#tobeinthedocument) or\n[`toContainElement`](#tocontainelement). Or if you just want to check if a value\nis indeed an `HTMLElement` you can always use some of\n[jest's built-in matchers](https://jestjs.io/docs/en/expect#tobeinstanceofclass):\n\n```js\nexpect(document.querySelector('.ok-button')).toBeInstanceOf(HTMLElement)\nexpect(document.querySelector('.cancel-button')).toBeTruthy()\n```\n\n> Note: The differences between `toBeInTheDOM` and `toBeInTheDocument` are\n> significant. Replacing all uses of `toBeInTheDOM` with `toBeInTheDocument`\n> will likely cause unintended consequences in your tests. Please make sure when\n> replacing `toBeInTheDOM` to read through the documentation of the proposed\n> alternatives to see which use case works better for your needs.\n\n\n## Inspiration\n\nThis whole library was extracted out of Kent C. Dodds' [DOM Testing\nLibrary][dom-testing-library], which was in turn extracted out of [React Testing\nLibrary][react-testing-library].\n\nThe intention is to make this available to be used independently of these other\nlibraries, and also to make it more clear that these other libraries are\nindependent from jest, and can be used with other tests runners as well.\n\n## Other Solutions\n\nI'm not aware of any, if you are please [make a pull request][prs] and add it\nhere!\n\n## Guiding Principles\n\n> [The more your tests resemble the way your software is used, the more\n> confidence they can give you.][guiding-principle]\n\nThis library follows the same guiding principles as its mother library [DOM\nTesting Library][dom-testing-library]. Go [check them out][guiding-principle]\nfor more details.\n\nAdditionally, with respect to custom DOM matchers, this library aims to maintain\na minimal but useful set of them, while avoiding bloating itself with merely\nconvenient ones that can be easily achieved with other APIs. In general, the\noverall criteria for what is considered a useful custom matcher to add to this\nlibrary, is that doing the equivalent assertion on our own makes the test code\nmore verbose, less clear in its intent, and/or harder to read.\n\n## Contributors\n\nThanks goes to these people ([emoji key][emojis]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://kentcdodds.com\"><img src=\"https://avatars.githubusercontent.com/u/1500684?v=3\" width=\"100px;\" alt=\"Kent C. Dodds\"/><br /><sub><b>Kent C. Dodds</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=kentcdodds\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=kentcdodds\" title=\"Documentation\">📖</a> <a href=\"#infra-kentcdodds\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=kentcdodds\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"http://audiolion.github.io\"><img src=\"https://avatars1.githubusercontent.com/u/2430381?v=4\" width=\"100px;\" alt=\"Ryan Castner\"/><br /><sub><b>Ryan Castner</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=audiolion\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://www.dnlsandiego.com\"><img src=\"https://avatars0.githubusercontent.com/u/8008023?v=4\" width=\"100px;\" alt=\"Daniel Sandiego\"/><br /><sub><b>Daniel Sandiego</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=dnlsandiego\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Miklet\"><img src=\"https://avatars2.githubusercontent.com/u/12592677?v=4\" width=\"100px;\" alt=\"Paweł Mikołajczyk\"/><br /><sub><b>Paweł Mikołajczyk</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=Miklet\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"http://co.linkedin.com/in/alejandronanez/\"><img src=\"https://avatars3.githubusercontent.com/u/464978?v=4\" width=\"100px;\" alt=\"Alejandro Ñáñez Ortiz\"/><br /><sub><b>Alejandro Ñáñez Ortiz</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=alejandronanez\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/pbomb\"><img src=\"https://avatars0.githubusercontent.com/u/1402095?v=4\" width=\"100px;\" alt=\"Matt Parrish\"/><br /><sub><b>Matt Parrish</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/issues?q=author%3Apbomb\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=pbomb\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=pbomb\" title=\"Documentation\">📖</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=pbomb\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/wKovacs64\"><img src=\"https://avatars1.githubusercontent.com/u/1288694?v=4\" width=\"100px;\" alt=\"Justin Hall\"/><br /><sub><b>Justin Hall</b></sub></a><br /><a href=\"#platform-wKovacs64\" title=\"Packaging/porting to new platform\">📦</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/antoaravinth\"><img src=\"https://avatars1.githubusercontent.com/u/1241511?s=460&v=4\" width=\"100px;\" alt=\"Anto Aravinth\"/><br /><sub><b>Anto Aravinth</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=antoaravinth\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=antoaravinth\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=antoaravinth\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/JonahMoses\"><img src=\"https://avatars2.githubusercontent.com/u/3462296?v=4\" width=\"100px;\" alt=\"Jonah Moses\"/><br /><sub><b>Jonah Moses</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=JonahMoses\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"http://team.thebrain.pro\"><img src=\"https://avatars1.githubusercontent.com/u/4002543?v=4\" width=\"100px;\" alt=\"Łukasz Gandecki\"/><br /><sub><b>Łukasz Gandecki</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=lgandecki\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=lgandecki\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=lgandecki\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://sompylasar.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/498274?v=4\" width=\"100px;\" alt=\"Ivan Babak\"/><br /><sub><b>Ivan Babak</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/issues?q=author%3Asompylasar\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-sompylasar\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jday3\"><img src=\"https://avatars3.githubusercontent.com/u/4439618?v=4\" width=\"100px;\" alt=\"Jesse Day\"/><br /><sub><b>Jesse Day</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=jday3\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"http://gnapse.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/15199?v=4\" width=\"100px;\" alt=\"Ernesto García\"/><br /><sub><b>Ernesto García</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=gnapse\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=gnapse\" title=\"Documentation\">📖</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=gnapse\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"http://ociweb.com/mark/\"><img src=\"https://avatars0.githubusercontent.com/u/79312?v=4\" width=\"100px;\" alt=\"Mark Volkmann\"/><br /><sub><b>Mark Volkmann</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/issues?q=author%3Amvolkmann\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=mvolkmann\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/smacpherson64\"><img src=\"https://avatars1.githubusercontent.com/u/1659099?v=4\" width=\"100px;\" alt=\"smacpherson64\"/><br /><sub><b>smacpherson64</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=smacpherson64\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=smacpherson64\" title=\"Documentation\">📖</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=smacpherson64\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jgoz\"><img src=\"https://avatars2.githubusercontent.com/u/132233?v=4\" width=\"100px;\" alt=\"John Gozde\"/><br /><sub><b>John Gozde</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/issues?q=author%3Ajgoz\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=jgoz\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/callada\"><img src=\"https://avatars2.githubusercontent.com/u/7830590?v=4\" width=\"100px;\" alt=\"Iwona\"/><br /><sub><b>Iwona</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=callada\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=callada\" title=\"Documentation\">📖</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=callada\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/6ewis\"><img src=\"https://avatars0.githubusercontent.com/u/840609?v=4\" width=\"100px;\" alt=\"Lewis\"/><br /><sub><b>Lewis</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=6ewis\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://blog.lourenci.com/\"><img src=\"https://avatars3.githubusercontent.com/u/2339362?v=4\" width=\"100px;\" alt=\"Leandro Lourenci\"/><br /><sub><b>Leandro Lourenci</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/issues?q=author%3Alourenci\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=lourenci\" title=\"Documentation\">📖</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=lourenci\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=lourenci\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mufasa71\"><img src=\"https://avatars1.githubusercontent.com/u/626420?v=4\" width=\"100px;\" alt=\"Shukhrat Mukimov\"/><br /><sub><b>Shukhrat Mukimov</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/issues?q=author%3Amufasa71\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dreyks\"><img src=\"https://avatars3.githubusercontent.com/u/1481264?v=4\" width=\"100px;\" alt=\"Roman Usherenko\"/><br /><sub><b>Roman Usherenko</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=dreyks\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=dreyks\" title=\"Tests\">⚠️</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"http://josephhsu.com\"><img src=\"https://avatars1.githubusercontent.com/u/648?v=4\" width=\"100px;\" alt=\"Joe Hsu\"/><br /><sub><b>Joe Hsu</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=jhsu\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/diegohaz\"><img src=\"https://avatars3.githubusercontent.com/u/3068563?v=4\" width=\"100px;\" alt=\"Haz\"/><br /><sub><b>Haz</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/issues?q=author%3Adiegohaz\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=diegohaz\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://blog.revathskumar.com\"><img src=\"https://avatars3.githubusercontent.com/u/463904?v=4\" width=\"100px;\" alt=\"Revath S Kumar\"/><br /><sub><b>Revath S Kumar</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=revathskumar\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://raccoon.studio\"><img src=\"https://avatars0.githubusercontent.com/u/4989733?v=4\" width=\"100px;\" alt=\"hiwelo.\"/><br /><sub><b>hiwelo.</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=hiwelo\" title=\"Code\">💻</a> <a href=\"#ideas-hiwelo\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=hiwelo\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/lukaszfiszer\"><img src=\"https://avatars3.githubusercontent.com/u/1201711?v=4\" width=\"100px;\" alt=\"Łukasz Fiszer\"/><br /><sub><b>Łukasz Fiszer</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=lukaszfiszer\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jeanchung\"><img src=\"https://avatars0.githubusercontent.com/u/10778036?v=4\" width=\"100px;\" alt=\"Jean Chung\"/><br /><sub><b>Jean Chung</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=jeanchung\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=jeanchung\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/CarlaTeo\"><img src=\"https://avatars3.githubusercontent.com/u/9220147?v=4\" width=\"100px;\" alt=\"CarlaTeo\"/><br /><sub><b>CarlaTeo</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=CarlaTeo\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=CarlaTeo\" title=\"Tests\">⚠️</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/YardenShoham\"><img src=\"https://avatars3.githubusercontent.com/u/20454870?v=4\" width=\"100px;\" alt=\"Yarden Shoham\"/><br /><sub><b>Yarden Shoham</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=YardenShoham\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"http://jagascript.com\"><img src=\"https://avatars0.githubusercontent.com/u/4562878?v=4\" width=\"100px;\" alt=\"Jaga Santagostino\"/><br /><sub><b>Jaga Santagostino</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/issues?q=author%3Akandros\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=kandros\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=kandros\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/connormeredith\"><img src=\"https://avatars0.githubusercontent.com/u/4907463?v=4\" width=\"100px;\" alt=\"Connor Meredith\"/><br /><sub><b>Connor Meredith</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=connormeredith\" title=\"Code\">💻</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=connormeredith\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/testing-library/jest-dom/commits?author=connormeredith\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/pwolaq\"><img src=\"https://avatars3.githubusercontent.com/u/10261750?v=4\" width=\"100px;\" alt=\"Pawel Wolak\"/><br /><sub><b>Pawel Wolak</b></sub></a><br /><a href=\"https://github.com/testing-library/jest-dom/commits?author=pwolaq\" title=\"Tests\">⚠️</a></td>\n  </tr>\n</table>\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors][all-contributors] specification.\nContributions of any kind welcome!\n\n## LICENSE\n\nMIT\n\n[jest]: https://facebook.github.io/jest/\n[dom-testing-library]: https://github.com/testing-library/dom-testing-library\n[react-testing-library]:\n  https://github.com/testing-library/react-testing-library\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[build-badge]:\n  https://img.shields.io/travis/testing-library/jest-dom.svg?style=flat-square\n[build]: https://travis-ci.org/testing-library/jest-dom\n[coverage-badge]:\n  https://img.shields.io/codecov/c/github/testing-library/jest-dom.svg?style=flat-square\n[coverage]: https://codecov.io/github/testing-library/jest-dom\n[version-badge]:\n  https://img.shields.io/npm/v/@testing-library/jest-dom.svg?style=flat-square\n[package]: https://www.npmjs.com/package/@testing-library/jest-dom\n[downloads-badge]:\n  https://img.shields.io/npm/dm/@testing-library/jest-dom.svg?style=flat-square\n[npmtrends]: http://www.npmtrends.com/@testing-library/jest-dom\n[license-badge]:\n  https://img.shields.io/npm/l/@testing-library/jest-dom.svg?style=flat-square\n[license]: https://github.com/testing-library/jest-dom/blob/master/LICENSE\n[prs-badge]:\n  https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[coc-badge]:\n  https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]:\n  https://github.com/testing-library/jest-dom/blob/master/other/CODE_OF_CONDUCT.md\n[github-watch-badge]:\n  https://img.shields.io/github/watchers/testing-library/jest-dom.svg?style=social\n[github-watch]: https://github.com/testing-library/jest-dom/watchers\n[github-star-badge]:\n  https://img.shields.io/github/stars/testing-library/jest-dom.svg?style=social\n[github-star]: https://github.com/testing-library/jest-dom/stargazers\n[twitter]:\n  https://twitter.com/intent/tweet?text=Check%20out%20jest-dom%20by%20%40gnapse%20https%3A%2F%2Fgithub.com%2Ftesting-library%2Fjest-dom%20%F0%9F%91%8D\n[twitter-badge]:\n  https://img.shields.io/twitter/url/https/github.com/testing-library/jest-dom.svg?style=social\n[emojis]: https://allcontributors.org/docs/en/emoji-key\n[all-contributors]: https://github.com/all-contributors/all-contributors\n[guiding-principle]: https://testing-library.com/docs/guiding-principles\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/testing-library/jest-dom.git"
  },
  "scripts": {
    "build": "kcd-scripts build",
    "format": "kcd-scripts format",
    "lint": "kcd-scripts lint",
    "setup": "npm install && npm run validate -s",
    "test": "kcd-scripts test",
    "test:update": "npm test -- --updateSnapshot --coverage",
    "validate": "kcd-scripts validate"
  },
  "version": "4.2.4"
}
