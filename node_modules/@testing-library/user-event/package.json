{
  "_from": "@testing-library/user-event@^7.1.2",
  "_id": "@testing-library/user-event@7.2.1",
  "_inBundle": false,
  "_integrity": "sha512-oZ0Ib5I4Z2pUEcoo95cT1cr6slco9WY7yiPpG+RGNkj8YcYgJnM7pXmYmorNOReh8MIGcKSqXyeGjxnr8YiZbA==",
  "_location": "/@testing-library/user-event",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@testing-library%2fuser-event",
    "fetchSpec": "^7.1.2",
    "name": "@testing-library/user-event",
    "raw": "@testing-library/user-event@^7.1.2",
    "rawSpec": "^7.1.2",
    "registry": true,
    "saveSpec": null,
    "scope": "@testing-library",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@testing-library/user-event/-/user-event-7.2.1.tgz",
  "_shasum": "2ad4e844175a3738cb9e7064be5ea070b8863a1c",
  "_spec": "@testing-library/user-event@^7.1.2",
  "_where": "/home/krishnavamsi/react/my-app",
  "author": {
    "email": "polvara@gmail.com",
    "name": "Giorgio Polvara"
  },
  "bugs": {
    "url": "https://github.com/testing-library/user-event/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Simulate user events for react-testing-library",
  "devDependencies": {
    "@babel/cli": "^7.7.5",
    "@babel/core": "^7.7.5",
    "@babel/preset-env": "^7.7.6",
    "@babel/preset-react": "^7.7.4",
    "@testing-library/dom": "^6.11.0",
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.4.0",
    "@testing-library/vue": "^4.1.0",
    "all-contributors-cli": "^6.11.2",
    "babel-core": "7.0.0-bridge.0",
    "babel-jest": "24.9.0",
    "codecov": "3.6.1",
    "husky": "^3.1.0",
    "jest": "24.9.0",
    "lint-staged": "^9.5.0",
    "prettier": "^1.19.1",
    "react": "^16.12.0",
    "react-dom": "^16.12.0",
    "regenerator-runtime": "0.13.3",
    "semantic-release": "^15.13.31",
    "travis-deploy-once": "5.0.11",
    "vue": "^2.6.11",
    "vue-template-compiler": "^2.6.11"
  },
  "homepage": "https://github.com/testing-library/user-event#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "dom-testing-library",
    "react",
    "react-testing-library",
    "testing"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "@testing-library/user-event",
  "optionalDependencies": {},
  "peerDependencies": {
    "@testing-library/dom": ">=5"
  },
  "readme": "<div align=\"center\">\n<h1>user-event</h1>\n\n<a href=\"https://www.emojione.com/emoji/1f415\">\n  <img\n    height=\"80\"\n    width=\"80\"\n    alt=\"dog\"\n    src=\"https://raw.githubusercontent.com/testing-library/user-event/master/other/dog.png\"\n  />\n</a>\n\n<p>Simulate user events for <a href=\"https://github.com/testing-library/react-testing-library\">react-testing-library</a>.</p>\n\n<br />\n</div>\n\n<hr />\n\n[![Build Status](https://travis-ci.org/testing-library/user-event.svg?branch=master)](https://travis-ci.org/testing-library/user-event)\n[![Maintainability](https://api.codeclimate.com/v1/badges/75f1ff4397e994c6004e/maintainability)](https://codeclimate.com/github/testing-library/user-event/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/75f1ff4397e994c6004e/test_coverage)](https://codeclimate.com/github/testing-library/user-event/test_coverage)\n[![All Contributors](https://img.shields.io/badge/all_contributors-13-orange.svg?style=flat-square)](#contributors-)\n\n## The problem\n\nFrom\n[testing-library/dom-testing-library#107](https://github.com/testing-library/dom-testing-library/issues/107):\n\n> [...] it is becoming apparent the need to express user actions on a web page\n> using a higher-level abstraction than `fireEvent`\n\n## The solution\n\n`user-event` tries to simulate the real events that would happen in the browser\nas the user interacts with it. For example `userEvent.click(checkbox)` would\nchange the state of the checkbox.\n\n**The library is still a work in progress and any help is appreciated.**\n\n## Installation\n\nWith NPM:\n\n```sh\nnpm install @testing-library/user-event --save-dev\n```\n\nWith Yarn:\n\n```sh\nyarn add @testing-library/user-event --dev\n```\n\nNow simply import it in your tests:\n\n```js\nimport userEvent from \"@testing-library/user-event\";\n\n// or\n\nvar userEvent = require(\"@testing-library/user-event\");\n```\n\n## API\n\n### `click(element)`\n\nClicks `element`, depending on what `element` is it can have different side\neffects.\n\n```jsx\nimport React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\ntest(\"click\", () => {\n  const { getByText, getByTestId } = render(\n    <div>\n      <label htmlFor=\"checkbox\">Check</label>\n      <input id=\"checkbox\" data-testid=\"checkbox\" type=\"checkbox\" />\n    </div>\n  );\n\n  userEvent.click(getByText(\"Check\"));\n  expect(getByTestId(\"checkbox\")).toHaveAttribute(\"checked\", true);\n});\n```\n\n### `dblClick(element)`\n\nClicks `element` twice, depending on what `element` is it can have different\nside effects.\n\n```jsx\nimport React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\ntest(\"double click\", () => {\n  const onChange = jest.fn();\n  const { getByTestId } = render(\n    <input type=\"checkbox\" id=\"checkbox\" onChange={onChange} />\n  );\n  const checkbox = getByTestId(\"checkbox\");\n  userEvent.dblClick(checkbox);\n  expect(onChange).toHaveBeenCalledTimes(2);\n  expect(checkbox).toHaveProperty(\"checked\", false);\n});\n```\n\n### `type(element, text, [options])`\n\nWrites `text` inside an `<input>` or a `<textarea>`.\n\n```jsx\nimport React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\nconst { getByTestId } = test(\"click\", () => {\n  render(<textarea data-testid=\"email\" />);\n});\n\nuserEvent.type(getByTestId(\"email\"), \"Hello, World!\");\nexpect(getByTestId(\"email\")).toHaveAttribute(\"value\", \"Hello, World!\");\n```\n\nIf `options.allAtOnce` is `true`, `type` will write `text` at once rather than\none character at the time. `false` is the default value.\n\n`options.delay` is the number of milliseconds that pass between two characters\nare typed. By default it's 0. You can use this option if your component has a\ndifferent behavior for fast or slow users.\n\n### `selectOptions(element, values)`\n\nSelects the specified option(s) of a `<select>` or a `<select multiple>`\nelement.\n\n```jsx\nimport React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\nconst { getByTestId } = render(\n  <select multiple data-testid=\"select-multiple\">\n    <option data-testid=\"val1\" value=\"1\">\n      1\n    </option>\n    <option data-testid=\"val2\" value=\"2\">\n      2\n    </option>\n    <option data-testid=\"val3\" value=\"3\">\n      3\n    </option>\n  </select>\n);\n\nuserEvent.selectOptions(getByTestId(\"select-multiple\"), [\"1\", \"3\"]);\n\nexpect(getByTestId(\"val1\").selected).toBe(true);\nexpect(getByTestId(\"val2\").selected).toBe(false);\nexpect(getByTestId(\"val3\").selected).toBe(true);\n```\n\nThe `values` parameter can be either an array of values or a singular scalar\nvalue.\n\n### `tab({shift, focusTrap})`\n\nFires a tab event changing the document.activeElement in the same way the\nbrowser does.\n\nOptions:\n\n- `shift` (default `false`) can be true or false to invert tab direction.\n- `focusTrap` (default `document`) a container element to restrict the tabbing\n  within.\n\n> **A note about tab**: [jsdom does not support tabbing](https://github.com/jsdom/jsdom/issues/2102), so this feature  is a way to enable tests to verify tabbing from the end user's perspective.  However, this limitation in jsdom will mean that components like [focus-trap-react](https://github.com/davidtheclark/focus-trap-react) will not work with `userEvent.tab()` or jsdom.  For that reason, the `focusTrap` option is available to let you ensure your user is restricted within a focus-trap.  \n\n```jsx\nimport React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport userEvent from \"@testing-library/user-event\";\n\nit(\"should cycle elements in document tab order\", () => {\n  const { getAllByTestId } = render(\n    <div>\n      <input data-testid=\"element\" type=\"checkbox\" />\n      <input data-testid=\"element\" type=\"radio\" />\n      <input data-testid=\"element\" type=\"number\" />\n    </div>\n  );\n\n  const [checkbox, radio, number] = getAllByTestId(\"element\");\n\n  expect(document.body).toHaveFocus();\n\n  userEvent.tab();\n\n  expect(checkbox).toHaveFocus();\n\n  userEvent.tab();\n\n  expect(radio).toHaveFocus();\n\n  userEvent.tab();\n\n  expect(number).toHaveFocus();\n\n  userEvent.tab();\n\n  // cycle goes back to first element\n  expect(checkbox).toHaveFocus();\n});\n```\n\n## Contributors\n\nThanks goes to these wonderful people\n([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/Gpx\"><img src=\"https://avatars0.githubusercontent.com/u/767959?v=4\" width=\"100px;\" alt=\"Giorgio Polvara\"/><br /><sub><b>Giorgio Polvara</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/issues?q=author%3AGpx\" title=\"Bug reports\">üêõ</a> <a href=\"https://github.com/testing-library/user-event/commits?author=Gpx\" title=\"Code\">üíª</a> <a href=\"https://github.com/testing-library/user-event/commits?author=Gpx\" title=\"Documentation\">üìñ</a> <a href=\"#ideas-Gpx\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#infra-Gpx\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a> <a href=\"#review-Gpx\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/testing-library/user-event/commits?author=Gpx\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/weyert\"><img src=\"https://avatars3.githubusercontent.com/u/7049?v=4\" width=\"100px;\" alt=\"Weyert de Boer\"/><br /><sub><b>Weyert de Boer</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/commits?author=weyert\" title=\"Code\">üíª</a> <a href=\"https://github.com/testing-library/user-event/commits?author=weyert\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/twhitbeck\"><img src=\"https://avatars2.githubusercontent.com/u/762471?v=4\" width=\"100px;\" alt=\"Tim Whitbeck\"/><br /><sub><b>Tim Whitbeck</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/issues?q=author%3Atwhitbeck\" title=\"Bug reports\">üêõ</a> <a href=\"https://github.com/testing-library/user-event/commits?author=twhitbeck\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://michaeldeboey.be\"><img src=\"https://avatars3.githubusercontent.com/u/6643991?v=4\" width=\"100px;\" alt=\"Micha√´l De Boey\"/><br /><sub><b>Micha√´l De Boey</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/commits?author=MichaelDeBoey\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/michaellasky\"><img src=\"https://avatars2.githubusercontent.com/u/6646599?v=4\" width=\"100px;\" alt=\"Michael Lasky\"/><br /><sub><b>Michael Lasky</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/commits?author=michaellasky\" title=\"Code\">üíª</a> <a href=\"https://github.com/testing-library/user-event/commits?author=michaellasky\" title=\"Documentation\">üìñ</a> <a href=\"#ideas-michaellasky\" title=\"Ideas, Planning, & Feedback\">ü§î</a></td>\n    <td align=\"center\"><a href=\"https://github.com/shomalgan\"><img src=\"https://avatars0.githubusercontent.com/u/2883620?v=4\" width=\"100px;\" alt=\"Ahmad Esmaeilzadeh\"/><br /><sub><b>Ahmad Esmaeilzadeh</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/commits?author=shomalgan\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://calebeby.ml\"><img src=\"https://avatars1.githubusercontent.com/u/13206945?v=4\" width=\"100px;\" alt=\"Caleb Eby\"/><br /><sub><b>Caleb Eby</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/commits?author=calebeby\" title=\"Code\">üíª</a> <a href=\"https://github.com/testing-library/user-event/issues?q=author%3Acalebeby\" title=\"Bug reports\">üêõ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://afontcu.dev\"><img src=\"https://avatars0.githubusercontent.com/u/9197791?v=4\" width=\"100px;\" alt=\"Adri√† Fontcuberta\"/><br /><sub><b>Adri√† Fontcuberta</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/issues?q=author%3Aafontcu\" title=\"Bug reports\">üêõ</a> <a href=\"https://github.com/testing-library/user-event/commits?author=afontcu\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/testing-library/user-event/commits?author=afontcu\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skywickenden\"><img src=\"https://avatars2.githubusercontent.com/u/4930551?v=4\" width=\"100px;\" alt=\"Sky Wickenden\"/><br /><sub><b>Sky Wickenden</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/issues?q=author%3Askywickenden\" title=\"Bug reports\">üêõ</a> <a href=\"https://github.com/testing-library/user-event/commits?author=skywickenden\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/bogdanbodnar\"><img src=\"https://avatars2.githubusercontent.com/u/9034868?v=4\" width=\"100px;\" alt=\"Bodnar Bogdan\"/><br /><sub><b>Bodnar Bogdan</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/issues?q=author%3Abogdanbodnar\" title=\"Bug reports\">üêõ</a> <a href=\"https://github.com/testing-library/user-event/commits?author=bogdanbodnar\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://zach.website\"><img src=\"https://avatars0.githubusercontent.com/u/1699281?v=4\" width=\"100px;\" alt=\"Zach Perrault\"/><br /><sub><b>Zach Perrault</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/commits?author=zperrault\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/ryanastelly\"><img src=\"https://avatars1.githubusercontent.com/u/4138357?v=4\" width=\"100px;\" alt=\"Ryan Stelly\"/><br /><sub><b>Ryan Stelly</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/commits?author=FLGMwt\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/benmonro\"><img src=\"https://avatars3.githubusercontent.com/u/399236?v=4\" width=\"100px;\" alt=\"Ben Monro\"/><br /><sub><b>Ben Monro</b></sub></a><br /><a href=\"https://github.com/testing-library/user-event/commits?author=benmonro\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/all-contributors/all-contributors)\nspecification. Contributions of any kind welcome!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/testing-library/user-event.git"
  },
  "scripts": {
    "build": "babel src -d dist",
    "cm": "npx git-cz",
    "codecov": "codecov",
    "contributors:add": "all-contributors add",
    "contributors:generate": "all-contributors generate",
    "semantic-release": "semantic-release",
    "test": "jest",
    "test:coverage": "npm t -- --coverage",
    "travis-deploy-once": "travis-deploy-once"
  },
  "typings": "typings/index.d.ts",
  "version": "7.2.1"
}
